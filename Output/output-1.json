[
  {
    "title": "How to make a Symbol - Builder.io",
    "url": "https://www.builder.io/c/docs/make-a-symbol",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nTypes of Reusable Blocks\nIntro to Symbols\nMaking a Symbol\nOpening and Editing Symbols\nAdding Inputs to Symbols\nScheduling Symbols\nSymbols with Children\nUsing Symbols Across Spaces\nDynamic Symbols\nCreating Templates\nUsing Templates Across Spaces\nInstagram Templates\nLaunching Modals with Templates\nMaking a Dropdown Modal Template\nCreating a Sidebar Menu Template\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nMaking a Symbol\n\nYou can use Symbols to create and control content that you can use in multiple places throughout your app. This article guides you through creating and updating a Symbol.\n\nPrerequisites\n\nTo get the most out of this document, make sure you are familiar with the following:\n\nReusing blocks: get to know the different types of reusable blocks, which include Symbols.\nIntroduction to Symbols\nOpening and editing Symbols\n\nThe following video walks through the process for creating a Symbol, and below the video the steps are outlined.\n\nCreating a Symbol\n\nTo create a Symbol:\n\nSelect the block you'd like to convert to a Symbol and click on the arrow next to the Edit button.\nClick Convert to Symbol.\nIn the dialogue, name your Symbol and leave the Model field with the default Create Symbol Model text.\nClick the Convert button.\n\nYour Symbol is ready to use throughout your Space.\n\nTip: If you've created your Symbol through the Models section, rather than converting a Block as in this article, you must Publish your Symbol to make it available for use.\n\nUpdating Symbols\n\nEdit your Symbol by selecting Edit and then the Edit Symbol button.\n\nThe Symbol opens so you can make your changes.\n\nTo Publish, select the green Publish button in the upper right of the Symbol.\n\nUsing a Symbol\n\nTo use your new Symbol in a page, in the Insert tab, select the My Symbols tab and drag and drop your Symbol block onto the page.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nCreating a Symbol\nUpdating Symbols\nUsing a Symbol\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Settings - Builder.io",
    "url": "https://www.builder.io/c/docs/settings#organization-settings",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\nSettings\nOrganizations\nSpaces\nEnvironments\nUsers\nRules and Workflows\nSSO\nUsage\nImpressions\nPageviews\nImpressions vs. Pageviews\nCookies\nGDPR and US Compliance\nGet Help\n\nBlueprints\n\nSettings\n\nThere two levels of Settings, Organization and Space. By changing settings at the appropriate level, you can manage many settings for your Organization and for individual Spaces.\n\nThis document covers how to get to Organization and Space Settings, and includes links to related documentation on the many features available in Settings.\n\nOrganization Settings\n\nThe Settings section of your Builder account is where you manage your Organization, your Space(s), and users.\n\nTo get to your Organization Settings:\n\nLogin to Builder.\nEnter your Organization.\nClick on the Settings icon at the bottom left of the UI.\n\nThe following video shows this process. In this case, the Organization is named Enterprise Docs demos, a space we use for our documentation demo videos and screenshots.\n\nThe name of your Organization will likely be different. However, getting to your Organization Settings is the same, regardless of plan.\n\nFor more information, read the following documents.\n\nUnderstanding Organizations: a conceptual overview of what an Organization is.\nManaging Your Organization: a how-to guide for the most common Organization tasks.\nSpace Settings\n\nTo get to your Space Settings:\n\nLogin to Builder.\nEnter the Space you'd like to manage.\nClick on the Account Settings icon at the bottom left of the UI.\n\nThe following video shows this process. In this case, the Space is named My Favorite Space, a space we use for our documentation demo videos and screenshots.\n\nThe name of your Space will likely be different. However, getting to your Space Settings is the same, regardless of plan.\n\nFor more information, read the following documentation.\n\nUnderstanding Spaces: a conceptual overview of what a Space is.\nManaging Spaces: a how-to guide for the most common Space tasks.\nLogging out of your account\n\nTo log out of your Builder account:\n\nGo to Space Settings or your Organization Settings (either one works).\nClick on the cog icon at the upper right.\nSelect Log Out.\n\nThe following image shows where the Log Out option is in Settings:\n\nWhat's next\n\nThrough Account Settings, you can manage many settings, and finetune Builder features for your team, including:\n\nOrganization\nSpaces\nUsers for your organization as well as your Space(s)\nRoles and Permissions\nPublic and Private API Keys\nSubscription\nBilling\nTargeting Attributes\nSocial Media integrations\nEnvironments\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nOrganization Settings\nSpace Settings\nLogging out of your account\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Managing Your Organization - Builder.io",
    "url": "https://www.builder.io/c/docs/managing-organizations",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\nSettings\nOrganizations\nUnderstanding Organizations\nManaging Organizations\nSpaces\nEnvironments\nUsers\nRules and Workflows\nSSO\nUsage\nImpressions\nPageviews\nImpressions vs. Pageviews\nCookies\nGDPR and US Compliance\nGet Help\n\nBlueprints\n\nManaging Your Organization\n\nAn Organization is the top-most entity in Builder and contains users and Spaces.\n\nViewing and editing account details\n\nBuilder creates your first Organization automatically the first time you sign in.\n\nTo view or edit account details for your Organization, go to the Organization's Settings. With Admin permissions, you can:\n\nEdit the name of an Organization\nEdit and view billing information\nAccess private key information\nView invoices\nManage users\n\nThe following image is a screenshot of the Organization-level Settings, which features the Organization tab with account information and users, as well as the My Profile tab, which includes information about the name of the Organization and user account info. This document discusses each section in detail.\n\nManaging Spaces\n\nOrganizations contain Spaces. This means that you can access high-level data about a Space or create new a Space from within your Organization.\n\nAdding Spaces\n\nTo view all the spaces in an Organization, along with the number of users, bandwidth, and page views for those Spaces:\n\nGo to the Organization's Spaces tab.\nTo optionally filter data on the available spaces, click the three dots at the upper right and select a month and year.\nTo create a new Space within this Organization, click the + New Space button. Each space will have separate content, separate models, and separate Public API Keys.\n\nYou can also create a new Space by going to your Organization using the fly-out menu. Under your Organization, click + New Space.\n\nArchiving Spaces\n\nTo remove a Space from an Organization, you must archive that Space. Visit the Archiving a Space instructions in Managing Spaces.\n\nManaging payment and billing\n\nTo manage payment and billing information for your Organization:\n\nGo to the Organization Settings.\nTo the right of Payment, click Add Payment Info to add a credit card or Update Billing Info as required.\n\nSelf-Service customers can pay for the subscription with American Express, MasterCard, and Visa credit cards. Enterprise customers have the option of paying with ACH or wire transfer.\n\nViewing invoices\n\nTo view invoices for your Organization:\n\nGo to the Organization Settings.\nTo the right of Invoices, click View.\nAccessing invoices for Enterprise, Shopify, and Legacy plans\n\nEnterprise plans\n\nIf you need to change payment methods or access invoices, contact finance@builder.io.\n\nBuilder invoices for Shopify app users\n\nYou can find billing and invoices through Shopify's billing platform. Review your Shopify invoice to see any Builder charges.\n\nLegacy plans\n\nFor older accounts on legacy self-serve plans that only have a single space, you can see invoices within the Space Settings.\n\nManaging your billing and tax information\n\nTo update your billing and tax information — such as Tax ID or Tax Type — for your Organization:\n\nGo to the Organization Settings.\nOn the Payment line, click Update Billing Info.\nManaging Private Keys\n\nPrivate API Keys help you keep certain content private. For detailed information on Private API Keys, see the Managing Private API Keys section of Using Builder API Keys.\n\nManaging users\n\nYou must have users at the Organization level as well as in the Space they work in. Set up your users in this order:\n\nSet up your users in the Organization.\nSet up your users in the Space you want them to access.\n\nFor detailed instructions, see Managing Users.\n\nViewing Organization insights\n\nenterprise plans\n\nViewing the contents of the Insights tab for an Organization is an add-on feature available on the Enterprise plan.\n\nWhen this feature is enabled, Admins can access data such as who the most active users are, which, for example, can inform re-allocating user licenses based on activity.\n\nAdmins for the Organization have access to the Organization Insights, accessible from the Builder left sidebar. Organization Insights show you, by Space:\n\nUser names\nUser e-mail addresses\nUser role\nLast sign-in date\nCreation date\nLast refresh date\nDeleting an Organization\n\nIf you need to delete an Organization, contact us.\n\nWhat's next\n\nTo learn more about what's inside an Organization, see Roles and Permissions, Settings, and Spaces.\n\nIf you want to jump right in, visit Popular Tutorials.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nViewing and editing account details\nManaging Spaces\nAdding Spaces\nArchiving Spaces\nManaging payment and billing\nViewing invoices\nAccessing invoices for Enterprise, Shopify, and Legacy plans\nManaging your billing and tax information\nManaging Private Keys\nManaging users\nViewing Organization insights\nDeleting an Organization\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using Custom Targeting - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-targeting-attributes",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nCustom targeting attributes\nTargeting Cheatsheet\nCustomer Data Platforms\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing Custom Targeting Attributes\n\ngrowth plans\n\nLearn how to create custom targeting attributes in Builder.io to go beyond the built-in targeting options.\n\nPrerequisites:\nYou may want to read Targeting Content in Builder if this topic is new to you.\n\nThe short video below explains custom targeting attributes.\n\nYou can set custom targeting attributes to conditionally render content based on complex criteria. For example, you can:\n\nHave an announcement bar appear when a customer adds a certain item to their cart.\nDisplay different pages depending on a user's current stage in your onboarding flow.\nCustomize a sidebar depending on a user's profile.\n\nUsing Builder's built-in types, custom targeting attributes offer a straightforward way to allow your team to specify arbitrary targeting conditions using strings and booleans. Using custom types further allows your team to create targeting conditions based on input from forms, color pickers, calendars, and other rich user interfaces.\n\nSetting up a custom targeting attribute\n\nYou can set up a custom targeting attribute on the Account page, which enables you to use that attribute when targeting any content across your space.\n\nFrom the Account page, click the Edit pencil for Custom targeting attributes.\n\nClick New target attribute.\n\nYou can add a new custom targeting attribute from the Custom targeting attributes window using the following properties:\n\nName: The name of your custom targeting attribute.\nType: Your attribute's type determines the editor UI that pops up when a user targets content using your attribute. For example, users may enter text for a targeting attribute that has a string type inside of a text box, while a boolean type attribute presents the user with a toggle switch.\nEnum (string type only): Restricts user input for the string type to a multiple-choice selection of strings.\n\nClick Save to create your new custom targeting attribute.\n\nTargeting content with custom targeting attributes\n\nYou can target content with your custom targeting attributes by creating targeting conditions using those attributes.\n\nThe process is the same as targeting with built-in attributes; the only difference is that your custom targeting attributes appear in the list of attributes to choose from when creating a targeting condition.\n\nThe example below features two custom targeting attributes called Some string and Some product.\n\nRendering targeted content with custom targeting attributes\n\nTargeting works by matching the value of targeting data sent with a content API request to the value of your targeted content's targeting conditions. When you request content that uses the built-in Device or URL path targeting attributes, Builder automatically infers the targeting data from your request.\n\nWhen using custom targeting attributes, you can manually provide targeting data with your request either by using the JavaScript (JS) SDK or with query string parameters when requesting content using the content/GraphQL APIs.\n\nFor example, when requesting content that has a targeting condition named product that expects a product ID, you can set userAttributes when using the SDK:\n\nconst content = await builder.get('myTargetedContent', {\n  userAttributes: { product: product.id }\n}).promise();\n\n\nYou can alternatively use setUserAttributes to set the targeting attributes once across multiple content requests:\n\nbuilder.setUserAttributes({ product: product.id });\n\nconst content = await builder.get('myTargetedContent').promise();\nconst otherContent = await builder.get('myOtherTargetedContent').promise();\n\nFinally, when requesting content directly from the content or GraphQL APIs, you can pass the targeting attributes using query strings:\n\nconst response = await fetch(`https://cdn.builder.io/api/v2/content/my-model?apiKey=YOUR_API_KEY&userAttributes.product=${product.id}`)\n\nIf product.id matches the ID of the product selected for your targeting condition, then your content will be rendered.\n\nMatching custom targeting attributes with custom types\n\nIn order to know what targeting data to send with a content API request, it's important to know how a targeting attribute's type editor stores a user's input as a value.\n\nFor example, the editor for the built-in string type is a simple text box. The value entered inside this text box when adding a targeting condition is the value that must match the targeting data sent with your content API request for your content to be rendered.\n\nIn contrast, custom types generally provide editors with rich user interfaces, allowing users to provide complex inputs such as colors, forms, or products. How these inputs are represented as a stored value isn't always immediately clear and depends on the editor.\n\nFor example, the Shopify plugin's Shopify product handle custom type provides a searchable menu for selecting a product from a Shopify store. The editor stores the product's Shopify handle as the value.\n\nThe same plugin also provides a Shopify product custom type. Despite providing the same editor user interface for selecting a product, it stores the selected product using its Shopify ID.\n\nYou can refer to the documentation for the plugin that provides the custom type used by your custom attribute for more information on how the type's editor stores values.\n\nFor more information on passing parameters, check out the Builder Content API.\n\nNext steps\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites:\nSetting up a custom targeting attribute\nTargeting content with custom targeting attributes\nRendering targeted content with custom targeting attributes\nMatching custom targeting attributes with custom types\nNext steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Getting Around with the Command Palette - Builder.io",
    "url": "https://www.builder.io/c/docs/command-palette",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nThe Left Sidebar\nThe Visual Editor\nThe Top Bar\nBlock Types\nLayers\nLocking Groups\nStudio\nCommand Palette\nKeyboard Shortcuts\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nGetting Around Builder with the Command Palette\n\nGetting around Builder quickly can help you make the most of your time while working. Using the keyboard shortcut Cmd/Ctrl+k to open the Command Palette, you have direct access to Builder's most in-demand features.\n\nThe video below demonstrates one of the many Command Palette shortcuts, toggling the code editor.\n\nThis document covers:\n\nCommand Palette shortcuts\nUsing the Command Palette\nCommand Palette shortcuts\n\nTo search for content, grab key info, or navigate to any part of Builder use the Command Palette. You can directly and immediately access these features:\n\nToggle Dark Mode and Developer Options\nGo to the different sections of the Builder UI, such as Account Settings, or the Models section\nCopy your Public API Key\nSwitch to another Organization or Space\n\nWithin a content entry, the Command Palette has additional options specific to the Visual Editor including:\n\nImporting from web\nToggling the code editor, console, JSON view, templates\nDuplicating the current content entry\nLaunching Responsivizer\nImporting liquid\nViewing liquid output\n\nSelecting any of the suggested options in the Command Palette opens that section of Builder or feature.\n\nUsing the Command Palette\n\nWith the Command Palette you can immediately jump from one part of Builder to another, whether it be your content, areas of Builder—such as Account Settings or the documentation—or even launch Builder features such as JSON view or the code editor. To use the Command Palette:\n\nPress Cmd/Ctrl+k.\nType in your query or scroll to the option.\nPress Enter.\n\nTo filter content entries, type the word go followed by the name of the content entry; for example: go about, where the name of the entry you're looking for is \"about\".\n\nThe following video gives a brief demo of using the Command Palette to pull up a content entry in the Builder documentation called \"Breakpoints\", jump to the docs, copy your Public API Key, and toggle JSON view.\n\nWhat's next\n\nFor more on making the most of your workflow, see:\n\nKeyboard Shortcuts\nOrganizing Your Content with Folders\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nCommand Palette shortcuts\nUsing the Command Palette\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Introduction to Symbols - Builder.io",
    "url": "https://www.builder.io/c/docs/symbols-intro?_host=www.builder.io",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nTypes of Reusable Blocks\nIntro to Symbols\nMaking a Symbol\nOpening and Editing Symbols\nAdding Inputs to Symbols\nScheduling Symbols\nSymbols with Children\nUsing Symbols Across Spaces\nDynamic Symbols\nCreating Templates\nUsing Templates Across Spaces\nInstagram Templates\nLaunching Modals with Templates\nMaking a Dropdown Modal Template\nCreating a Sidebar Menu Template\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntro to Symbols\n\nWhen you want to create one element, reuse it throughout your site, and update all instances at once, use a Symbol. When you edit and Publish updates, the Symbol updates apply immediately to all occurrences of that Symbol throughout your app.\n\nYou can use Symbols for any content you want to reuse, such as a header, footer, or products. In fact, you can use it for repeated content that you want to use many places, such as a definition, an introductory paragraph or even a section of illustrated code.\n\nMake it once, reuse infinitely\n\nSave time by creating reusable elements such as headers, footers, navigation, and forms. Updates apply automatically to all instances of your Symbol.\n\nTo create your own Symbol, see How to create a Symbol.\n\nCustomizing your Symbols\n\nOccasionally, you might require an element like a product recommendation section or banner that needs to vary under specific conditions. In such cases, you can detach a Symbol from its source, Making a Symbol inline, which converts it into a standard Builder block. This way you can make inline changes for that particular instance.\n\nFor more on customizing Symbols, visit Adding Inputs to Symbols.\n\nTip: For a reusable component that you can edit individually, see Creating Templates. Templates are like Symbols, but when you edit a Template on a page, the other instances of that Template don't change.\n\nAdding a symbol to another account\n\nAt this time, you cannot transfer a symbol from one account to another. One workaround is to download your symbol and upload it to your other account.\n\nOpen the symbol you want to copy.\nRight click on the symbol and select Download content as JSON.\nCreate a new page in your other account, right click in the editor window, and select Upload builder.json file.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nMake it once, reuse infinitely\nCustomizing your Symbols\nAdding a symbol to another account\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Custom fields - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-fields",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nModels Intro\nArchitecture Best Practices\nPage Models\nSection Models\nData Models\nPreviewing a Data Model\nData Models & A/B Testing\nPrivate Models\nCustom Fields\nValidation Hooks\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nCustom Fields\n\nA field in Builder is a piece of data on a model. For example, the built-in Page model comes with two fields, a Title and a Description. These two fields help define what a Page is. Any time you make or edit any kind of model in Builder, you have the option of editing fields or adding custom fields.\n\nThe following video shows some example custom fields on the three kinds of models in Builder: the Page, Section, and Data models.\n\nPrerequisites\n\nTo get the most out of this document, make sure you've integrated Pages, Sections, or Data. The following tutorials give step-by-step instructions:\n\nIntegrate page building\n\nIntegrate section building\n\nIntegrate CMS data\n\nOverview of custom fields\n\nCustom fields are fields that you add to a model. You can add custom fields to models you create or to an existing model, such as the built-in Page model. All kinds of Builder models accept custom fields, so you can add the fields you need to Page models, Section models, and Data models.\n\nExamples of custom fields include data such as title, URL, name, timestamp, or any piece of data you want to define on a model. You define and specify aspects of your custom fields such as:\n\nType: There are many types available in Builder. Refer to Custom field types for more detail.\nLocalization: Translate fields according to region settings.\nDefault value: Pre-populate the custom fields you create.\nHelper text: Give your users a helpful hint about what to enter into the field.\nRequired: Make a field required or optional.\nEnum: Give users a predefined list of options.\nHidden: Make a given field hidden when editing content.\n\nThe following video shows where to find custom fields on a model, points out the available field Types, and then shows Page and Section custom fields in the Visual Editor's Option tab.\n\nAdding custom fields to a model\n\nYou can add custom fields to any model in Builder by doing the following:\n\nOpen the Model.\nClick the Edit Fields button.\nClick + New Field.\nName the field.\nChoose a Type.\nConfigure any other settings for the field and add additional fields as needed.\nScroll to the top and click Save.\n\nThe following video shows adding a custom field called name and date to a model.\n\nTo delete a custom field, click the x to the right of the field.\n\nUsing field values in your code\n\nTip: To interactively explore the data that is sent from the Builder API, check out the Builder API Explorer where you can query the Builder API using your actual data.\n\nCustom field types\n\nThe following table describes each Type in Builder along with an image of how each Type renders in the Builder UI.\n\nTip: This section covers the built-in types for models, but you can also make your own with plugins. For more information, see Making Your Own Plugins Overview.\n\nText\n\nText is analogous to the text type in HTML. With the Text type, you can specify minimum and maximum length.\n\nSelect\n\nCreates a select in content entries. With a select, teammates can choose from options you provide.\n\nLong Text\n\nLong Text accommodates multi-line text. With the Long Text type, you can specify minimum and maximum length.\n\nURL\n\nThe URL Type accommodates a URL, also known as a web address.\n\nFile\n\nUse the File Type to specify what kind(s) of file a user may upload to a custom field.\n\nNumber\n\nThe Number file type specifies that the value that the user enters must be a number.\n\nBoolean\n\nThe Boolean Type provides a toggle for a true/false setting.\n\nRich text/HTML\n\nThe Rick text/HTML Type provides a rich text interface with styling options and a toggle to write directly in HTML. Click the code icon, <>, at the upper right to toggle the HTML editor.\n\nDate\n\nUse the Date Type to accept a date from the user. When the user clicks on the input, a datepicker opens\n\nTimestamp\n\nUse the Timestamp Type to accept a date from the user. When the user clicks on the input, a date picker opens with a time picker. Though the Date and Timestamp Types appear similar, prefer Timestamp querying.\n\nColor\n\nUse Type Color to provide users with a color picker.\n\nList\n\nUse the List Type when for a series of items.\n\nReference\n\nUse the Reference type when you have Data entries that users choose from. For example, you could have a Blog Author custom field and when you click the Choose Entry button, all Blog Author Data entries display.\n\nMap﻿\n\nText\n\nUse the Map type when you want users to provide a collection of key-value pairs.\n\nJavaScript\n\nUse the JavaScript type so users can provide JavaScript code snippets.\n\nCode\n\nText\n\nUse the Code type for accepting JavaScript, HTML, CSS, or other type of code.\n\nTags\n\nUse the Tags type for adding Tags. The field is empty by default. To add tags, type the tag you'd like and press Enter. Click the x to delete a tag.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nOverview of custom fields\nAdding custom fields to a model\nUsing field values in your code\nQuerying by field values\nCustom field types\nText\nSelect\nLong Text\nURL\nFile\nNumber\nBoolean\nRich text/HTML\nDate\nTimestamp\nColor\nList\nReference\nMap﻿\nJavaScript\nCode\nTags\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Targeting Content - Builder.io",
    "url": "https://www.builder.io/c/docs/targeting?_host=www.builder.io",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nA/B Testing\nScheduling\nTargeting\nSmart Targeting\nScheduler\nTargeting e-commerce resources\nViewing Metrics\nUsing Custom Dashboards\nManaging Content Size\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nTargeting Content\n\ngrowth plans\n\nTargeting content for specific audiences can help you drive customer acquisition and retention.\n\nYou can target content based on attributes such as whether customers have purchased from a specific collection, their current product page, or if they have a product with a specific tag in their cart. These are just a few examples—there are endless possibilities for targeting.\n\nPrerequisites\n\nTo get the most out of this article, you should be familiar with the following:\n\nScheduling Content\nTargeting options by plan\n\nTargeting options in Builder depend on your plan.\n\nAll plans come with the URL Path targeting attribute.\nGrowth and Enterprise plans offer both URL Path and Device targeting capabilities.\nWith Growth plans and above, can use your own Custom Targeting Attributes.\nBuilder provides e-commerce plugins for various platforms, each equipped with custom targeting attributes.\nAccessing targeting attributes\n\nTo use targeting:\n\nOpen the content entry for which you'd like to configure targeting.\nClick the Targeting icon at the top of the Visual Editor.\nIn the Targeting dialog, click +Target, and choose a property from the dropdown menu.\n\nAs an example, the following video shows targeting where the URL is /demo and the Device is mobile. This means this page is to be delivered when the device the visitor is using is a mobile device.\n\nTargeting by device with SSR? When using SSR or SSG, and targeting by device—such as mobile, tablet, or desktop—you must reference the targeted device in userAttributes as in the following example:\n\nuserAttributes: {\n    ...\n  device: \"mobile\"\n}\n\n\nFor more details on userAttributes, visit the userAttributes entry in the Content API documentation.\n\nFor a Next.js-specific example, refer to this example on GitHub for retrieving userAgent and device type server side.\n\nUsing order with targeting\n\nThe order of content entries in Builder determines how Builder evaluates and determines which content entry to deliver. Builder starts at the top of the list of entries at the specified URL and works its way down to find the entry to render.\n\nFor example, when you have multiple pages set up as alternatives for a specific targeting condition, they all share the same URL. When a user requests that URL, Builder checks each page in the list associated with that URL, starting at the top. The first page that meets the specified targeting condition is the version that is displayed to the user.\n\nExample\n\nConsider three versions of a homepage; home, home 2, and home 3. Each has different content, but they are all at the same URL, as in the following:\n\nhome 3, targeting mobile\nhome 2, targeting desktop\nhome (fallback), with no targeting\n\nHere's how Builder determines which Page to deliver:\n\nFirst, Builder considers all published Pages at the requested URL, /.\nIf home 3 has the Device targeting attribute set to Mobile, and your user visits yoursite.com from their phone, they get the content from home 3.\nIf home 2 targets Tablet, Builder delivers that Page to tablet users.\nThis example also has a fallback, home (fallback), just in case. It's a best practice to be sure all your conditions have a fallback Page in case none of the conditions are met.\n\nWhen you configure targeting, you establish a condition about a user and then deliver the appropriate content to that user. For example, you might want a user on a mobile device to have a different UI from a user on a laptop. Targeting statements follow the below pattern:\n\nWhere condition + operator + value\n\nBuilt-in conditions are:\n\nDevice\nURL Path\n\nSome examples of targeting statements are:\n\nWhere URL is /shoes\nWhere device is tablet\n\nThe operators available are:\n\nis means equal to the value\nis not means not the value. Available for conditions with one possible value; for example, a Boolean.\ncontains means the condition includes in it the string you specify for the value\nstarts with means the condition begins with the string you specify for the value\nends with means the condition ends with the string you specify for the value\n\nAdditionally, if you're on a Growth or Enterprise plan, you can customize targeting to meet your specific needs. For more information, see Custom Targeting Attributes.\n\nTargeting in-depth\n\nThe following video provides an in-depth introduction to targeting in Builder:\n\nFor more information targeting based on query parameters, visit this Builder Forum discussion.\n\nShopify custom attributes\n\nWith Shopify, Builder offers several ways to target content. For example, you can leverage your Shopify customer tags or if a user has specific items in their cart, you can display and even A/B test your content.\n\nDepending on the type of theme page you're working on, such as a homepage, a collection page, or a product page, Builder populates additional targeting parameters specific to the theme page.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nTargeting options by plan\nAccessing targeting attributes\nUsing order with targeting\nExample\nTargeting statement structure\nTargeting in-depth\nShopify custom attributes\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Intro to Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-intro?_host=www.builder.io",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nModels Intro\nArchitecture Best Practices\nPage Models\nSection Models\nData Models\nPreviewing a Data Model\nData Models & A/B Testing\nPrivate Models\nCustom Fields\nValidation Hooks\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntro to Models\n\nA model is a paradigm—a pattern for something else. Builder offers three kinds of models that define content types:\n\nA Page model: The basis for a full Page built in Builder\nA Section model: The basis for a part of a Page.\nA Data model: Gives structure to a collection of data that you render as you choose.\n\nYou use these models as the defining source for content entries. Like a rubber stamp, the model provides a basic foundation. Each time you use a rubber stamp, the fundamental characteristics are the same but you might use the resulting image differently by varying other factors such as color and surface.\n\nSimilarly, with models in Builder you can define what a Page, Section, or collection of Data is and use those models over and over to build your site and populate it with content. And you can create as many models as you like.\n\nThe following graphic compares Builder models. Follow the Try it out link to play with a demo of each.\n\nVisual Pages\n\nTry out Pages\n\nUse Pages to manage entire pages, such as:\n\nMarketing and content pages\nLanding pages\n\nVisual Sections\n\nTry out Sections\n\nUse Sections to maintain parts of your site or app, such as:\n\nAnnouncement bars\nProduct editorial\nCollection heroes\nCart upsells\n\nStructured Data\n\nTry out Data\n\nUse Structured Data to manage structured data, such as:\n\nNavigation links\nProduct details\nBlog post authors\n\nAll models in Builder support:\n\nA/B Testing: Test different versions of your content.\nTargeting: Deliver specific content to the right people.\nScheduling: Publish your content at the right time.\nRoles and Permissions in a Space: Admins and Developers can edit models by default, but you can also specify permissions by content model using Custom Roles.\n\nThis means that you can granularly grant permissions, test, and precisely deliver content.\n\nExplore common integration patterns:\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nUsing models to build your app\n\nWhen you use models to build your app, you can create exactly the Pages, Sections, and Data specific to your use case. With your integrated app, you can, for example, use your Sections in the Pages you choose as well as reuse Data wherever you need it.\n\nExamples of models include:\n\nA seasonal announcement banner placed on a page between certain dates.\nMarketing tile targeting a specific persona on certain pages.\nBlog authors whose profiles you want to link to from different parts of your site.\n\nBy creating models for each type of content you need, you can ensure consistency while making the process of iterating more efficient. The developer creates and integrates a model and non-developer teammates can use that model to create as many content entries as they need.\n\nThe following diagram shows a typical Builder documentation page. The left side navigation is a Section, the body of the document is a Page, and the font colors are stored in a Data content entry.\n\nWhat's next\n\nTo get the most out of Builder Models, be sure to integrate and learn about each type of model:\n\nPage Model: Learn what a Page model is and how to use one.\nIntegrating Pages: Integrate Page building with your code base so non-dev team members can create as many pages as they need and developers can focus on code.\nSection Models: Learn about Section use cases and how to use Sections in your app.\nIntegrating Sections: Integrate Builder Sections with your codebase so teammates can create and use Sections wherever they need them.\nData Models: Give shape to data and learn how to query that data.\nIntegrating CMS Data: Integrate data to create reusable data across your site.\nCustom Fields: Learn about the wide array of options available for shaping your models.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nExplore common integration patterns:\nUsing models to build your app\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Section Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-sections",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nModels Intro\nArchitecture Best Practices\nPage Models\nSection Models\nData Models\nPreviewing a Data Model\nData Models & A/B Testing\nPrivate Models\nCustom Fields\nValidation Hooks\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nSection Models\n\nSection Models are the paradigm, or pattern, that defines what a Section is. When you make a Section content entry in the Content section of Builder, Builder uses the chosen Section model to create that Section content entry.\n\nIntegrate Builder Sections with your codebase\n\nWhen you integrate, non-coding team members can create as many Sections as they need for iterating, testing, targeting, and scheduling—leaving developers free to focus on the code.\n\nIntegrate Section Building\n\nAbout Section models\n\nA Section model describes a portion of a Page that your teammates can use in the Visual Editor. Use Section models to define editable parts of Pages, such as:\n\nAnnouncement bars\nMarketing sections on collection pages\nHeroes\nBlog posts\n\nLike Pages, you use Sections in the Visual Editor's drag-and-drop interface. Unlike Pages, however, a URL is optional for Sections.\n\nThe following image outlines an Add Block area of a Page. This area, a Section, is only a part of the Page.\n\nWith Sections, you can create your Section and then use targeting and querying to make it display in the right place at the right time. For more information, refer to Targeting Content and Scheduling Content.\n\nFinding Section models\n\nTo view the details of a Section model in a Space, do the following:\n\nGo to the Models section of the Builder UI.\nSelect the Section model.\n\nFrom within the Section model, you can edit and add fields. For details on fields in models, refer to Custom Fields.\n\nThe following video demonstrates the above steps for locating and opening a model. In this example, the Section model is named Blog article.\n\nCreating Section models\n\nYou can create Section models for any area of a Page. Section models are perfect for variations and iterating and you can create as many as you like.\n\nTo create and use a Section model, do the following:\n\nGo the the Models section of the Builder UI.\nClick the + Create Model button.\nChoose Section.\nIn the Model Display name field, enter the name you'd like this model to have when listed in the Models section of Builder. You can edit this later if you change your mind.\nName the model and fill out the Model Description field.\nClick Create.\nAdd any needed custom fields.\nClick Save.\n\nTo use the new Section model, integrate with your codebase and then your teammates can create content entries in the Visual Editor.\n\nThe following video shows how to create an example Blog article Section model then shows how to use the new model to create a content entry:\n\nWhat's next\n\nModels are a foundational part of Builder that you can customize to countless use cases. For more information on what you can do with models, refer to the following documentation:\n\nUsing Custom Fields: You can edit or create many kinds of custom fields on models with a variety of types.\nTargeting: Deliver specific content to the right people.\nScheduling: Publish your content at the right time.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nAbout Section models\nFinding Section models\nCreating Section models\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Editing and Previewing Your Site - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/preview-url",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nEditing and Previewing\nDeploy to a Preview Env\nGetting the Preview URL working\nDynamic Preview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nEditing and Previewing Your Site\n\nWhen you've integrated your app with Builder, you can edit and preview your site using a preview URL. Setting a preview URL gives you a way to develop and preview your site in the browser, just as you would any other site.\n\nTip: If you are using the HTML API to serve Builder content, follow the steps in the Previewing content on your site section of Builder HTML API to set up previewing for your content.\n\nPrerequisites\n\nTo get the most out of this document, you should have already completed the following:\n\nintegrated page building or section building\nPreview URLs work with all models\n\nYou can set a preview URL on a Page, Section, or Data model. Using a preview URL on any model gives you a way to render content and data to preview Pages, Sections, or Data while you're working.\n\nTip: With the Builder's React SDK, you can use live editing to render Data changes in real time. For configuration instructions, read the Usage with Data Models section of the React SDK readme on GitHub. If you aren't using the React SDK, you can still preview your data model. Once published, the changes will be reflected in the Visual Editor preview.\n\nSetting a persistent preview URL on a model\n\nWhen you're still building out your site before going live, you need to work locally for extended periods with the convenience of a persistent preview URL. In this scenario, you can set the preview URL on the model so that all content using that model is automatically configured with the preview URL.\n\nFor example, if you're creating pages and need to preview all pages on localhost, you can set the preview URL on the Page model to localhost so that all Page content has that preview URL of localhost.\n\nWhen your site is ready to go live, change the URL on the model to your staging or production URL.\n\nThe following video demonstrates opening a model and setting the URL.\n\nImportant: If you change the preview URL of a model from, for example, a live URL that is in production to localhost, any content using that model will no longer be live and all parts of your app using that model will be affected.\n\nIf you need to set the URL on the model, you must be certain that no published content is using that model.\n\nSetting a temporary preview URL\n\nWhen developing your app, you can set a temporary preview URL that resets upon refresh or if you leave the Visual Editor.\n\nThe following video shows how to click on the preview URL in the Visual Editor and edit it. This method is helpful if you're working on a page that is currently in production but that you would like to develop further. In this example, the preview URL is http://localhost:3000/test-page; that is, the localhost with the name of the page url, here, /test-page.\n\nSetting a temporary preview URL host in Developer Options\n\nWhen you need to test out new changes or components in your local code across multiple content entries or models, it can be handy to override your preview URL host (e.g. from your production host, like your-site.com, to your localhost) for the duration of your session.\n\nThis can save you from entering a temporary URL repeatedly as you move across content models or entries, when you want to be connected to your localhost throughout.\n\nTo set a preview URL temporarily for just your session, without affecting other teammates, use the Developer Options as follows:\n\nIn the Visual Editor, press Cmd+Ctrl+a or ⊞ Win +Ctrl+a to open the Developer Options. You must have Admin or Developer permissions to open this dialogue.\nIn the Override preview URL host field, enter the preview URL you'd like to use. This example uses http://localhost:4200, but your URL might be different.\nClick the X to close the dialogue.\n\nThis setting takes effect for the duration of your session, or until you remove it.\n\nSetting the URL in Developer Options only affects the user who changes this setting, not other developers, teammates, or site visitors.\n\nThe following video demonstrates using Developer Options to set the preview URL to localhost.\n\nWhen working on static sites, such as with Gatsby, Nuxt, or Next.js in static mode, there is some additional configuration you might need to do to get your preview URL to render previews.\n\nBy default, when creating a page and editing it in Builder, the editor and preview loads the URL for that page. For example, if you create a new page at /example but your static site has no such page, you could get a 404. There are two options for this scenario:\n\nAdding the Builder component to your 404 page\nToggling off this behavior of previewing and editing on the specific URL for a page\n\nIf you're getting a 404, add the Builder component to your 404 page to support previewing and editing.\n\nOn your 404 page in your code base, add <BuilderComponent> as in the following code snippet. In this example, if the page isn't found, BuilderComponent still returns a Builder page, so Builder gets the message it expects and returns a page.\n\nimport { Builder, BuilderComponent } from '@builder.io/react';\n\nexport function NotFoundPage() {\n  if (Builder.isPreviewing || Builder.isEditing) {\n     return <BuilderComponent model=\"page\" />\n  }\n\n  return <Your404Page />\n}\n\n\nTo turn off the default behavior of previewing and editing on the specific URL for a page, do the following.\n\nGo to Account Settings > Advanced Settings > Advanced.\nToggle Reload preview on URL path change to the off position.\n\nYou can turn off this setting to load the preview and editor on your hardcoded URL; for example, /builder-editing, regardless of the current editor path.\n\nThe following video demonstrates how to turn off the Reload preview on URL path change setting:\n\nYou can add logic to Page and Section models to dynamically create the preview URL. For example, you can use a snippet like the below to preview blog posts:\n\n// Check to see if the content is live. If so,\n// use your site's URL followed by the \n// dynamic path you specify.\nif(contentModel.isLive) {\n    return `https://your-site.com/your-directory/${content.data.slug}`\n}\n// If the site's not live, use a placeholder URL\nreturn `https://your-site.com/your-directory/__builder_editing__`\n\nYou can customize the Dynamic Preview URL logic on a model so that you can use features such as targeting, custom fields, and localization while previewing. For more details, refer to Dynamic Preview URLs.\n\nWhat's next\n\nIf you've integrated and followed all the instructions above but your iframe contents still aren't loading, check out Getting Your Preview URL Working.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nPreview URLs work with all models\nSetting a persistent preview URL on a model\nSetting a temporary preview URL\nSetting a temporary preview URL host in Developer Options\nUsing a preview URL with static sites\nAdding Builder component to your 404 page\nTurning off preview for a specific URL\nCreating Dynamic Preview URLs\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Creating a Page - Builder.io",
    "url": "https://www.builder.io/c/docs/create-page",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nPopular Tutorials\n\n>\n\nHow to Create a Page\nCreating a Page\n\nThis tutorial is an introduction to creating a blank page, dragging in a template, previewing, and publishing. Perfect if you're new to Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: < 1 minute\n\nPrerequisites\n\nTo get the most out of this tutorial, you should have the following:\n\nYou'll need a Builder account.\nAn evergreen browser; that is, a modern, up-to-date browser such as Google Chrome.\nCreating a page\nGo to the Content section of Builder.\nClick + New and select Page.\nName the page; for example, About. Builder auto generates a URL based on the name you provide, but you can customize the URL if you like.\nChoose a template or use the blank template and create a page from scratch.\nWhen your page is ready, click the Publish button.\nTo view your page, click the eyeball icon next to the Publish button and choose View current draft or View live page. If View Live Page isn't clickable, be sure that you've published.\n\nThe following video demonstrates creating and publishing a Page:\n\nTip: For step-by-step instructions on building a landing page inspired by Everlane, check out Making a Landing Page.\n\nExtra: Page models, or how Builder defines Pages\n\nBuilder comes with a built-in Page model for you to use. The Page model is what defines a Page. When you create a Page content entry, as this tutorial shows, Builder uses the Page model to determine the characteristics the Page content entry.\n\nThe default Page comes with a Title and Description field. If you need to edit the default Page model or create additional models, check out Intro to Models. Working with models is an ideal way for developers to define content paradigms that all team members can use.\n\nNext steps\n\nTo get the most out of Builder Pages, start by Integrating Pages with your codebase. In this way, the developer can focus on the code while non-coding team members have the freedom to create and edit as many Pages as they like.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nCreating a page\nExtra: Page models, or how Builder defines Pages\nNext steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Input types for custom components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-input-types#code-strong-list-strong-code",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nIntro\nRegistering Components\nIn the Visual Editor\nChild Blocks in Components\nOverriding Components\nComponents-only Mode\nInput Types\nVersioning\nregisterComponent()\nSSR & SSG\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nInput Types in Builder\n\nWhen you create custom components to use in Builder, there are two required inputs and a number of optional inputs to help you further customize your components. This document covers these inputs types in detail.\n\nThis document covers the following:\n\nRequired inputs: inputs you must use with your custom components\nOptional inputs for further customization: inputs that you can use to modify the look and behavior of your component in the Visual Editor\nInput type examples: definitions, code snippets, and a screenshot of input types in the Visual Editor\n\nTip: With plugins in Builder, you can create custom field types. For more information on using Builder's built-in plugins or creating your own, see Intro to Built-in Plugins and Making a Plugin.\n\nPrerequisites\n\nTo get the most out of this document, you should be familiar with Integrating Your Custom Components with Builder.\n\nRequired inputs\n\nWhen you register a component with Builder, you must include the name and type inputs as in the following table:\n\nName\tRequired\tDescription\n\nname\n\n\t\n\nYes\n\n\t\n\nA unique name for this input that should match the equivalent prop name on your React component.\n\n\n\n\ntype\n\n\t\n\nYes\n\n\t\n\nTypes correlate to what editing UI is appropriate to edit this field. Common types include:\n\n'string'\n'number'\n'boolean'\n'longText' // String type but with a multiline text field editor\n'richText' // Displays a rich text editor and provides the value as html\n'file' // Uploads a file and provides the value as a url string\n'color'\n'date'\n'email'\n'object'\n'list'\n'reference' // displays a content entry picker to reference\nOptional inputs for further customization\n\nYou can use additional inputs to further customize your components in Builder. The following table contains Builder's optional inputs.\n\nName\tType\tDescription\n\nadvanced\n\n\t\n\nBoolean\n\n\t\n\nSet to true to put this component under the Show More section of the Options tab. Useful for things that are advanced or rarely used and don't need to be prominent.\n\n\n\n\nallowedFileTypes\n\n\t\n\narray\n\n\t\n\nFor the file input type, specify what types of files users can upload. This is an array that takes content-type files such as:\n\nallowedFileTypes: ['jpeg', 'png', 'mp4', 'gif', 'pdf', 'svg']\n\n\n\ndefaultValue\n\n\t\n\nany\n\n\t\n\nUse for showing an example value in the input form when creating a new instance of this component, to users understand its purpose.\n\n\n\n\nenum\n\n\t\n\narray\n\n\t\n\nFor any text-based field type, you can specify a set of options that the field can use.\n\nenum: ['option 1', 'option 2']\n\n\n\nfriendlyName\n\n\t\n\nstring\n\n\t\n\nThe name the Visual Editor displays for the input.\n\nfriendlyName: 'Open link in new tab',\n\n\n\nhelperText\n\n\t\n\nstring\n\n\t\n\nProvide text to help the end user know how to fill in this input. Displays below the input.\n\nhelperText: 'Some helpful description about how to use this input'\n\n\n\nmodel\n\n\t\n\nstring\n\n\t\n\nUse optionally with inputs of type reference. Restricts the content entry picker to a specific model by name.\n\nBuilder.registerComponent(ProductBox, {\n  name: 'ProductBox',\n  inputs: [{\n    name: 'metafields',\n    type: 'reference',\n    model: 'product-metafields'\n }]\n})\n\n\n\n\n\nonChange\n\n\t\n\nFunction\n\n\t\n\nProvide a function that is called whenever the value of the input is updated. Useful for more complex validation than regex or running custom logic when an input value updates.\n\n// Example of how to validate and limit the length \n// of a list input called myList\n// \n// Note: the function is stringified and evaluated in \n// the context of the parent window, \n// so don’t try to use any references to other \n// variables or functions that you might have \n// within the file that your component defined\nonChange: (options) => {\n  if (options.get('myList').length > 6) {\n    options.set('myList', options.get('myList').slice(0, 6))\n    alert('maximum items is 6, delete items to continue')\n  }\n}\n\n\n\n\nregex\n\n\t\n\nobject\n\n\t\n\nFor any input that results in a string value you can provide a regex to validate user input.\n\n regex: {\n    // pattern to test; such as \"^\\/[a-z]$\" \n    pattern: \"^\\/[a-z]$\",\n    // flags for the RegExp constructor; for example, \"gi\"  */\n    options: \"g\",\n    // message to display to end-users if the regex fails\n    message: \"You must use a relative url starting with '/...' \"\n  }\n\n\n\n\nshowIf\n\n\t\n\nFunction\n\n\t\n\nShow and hide the input dynamically.\n\noptions is an object with the current options, that is, values from inputs, that are set on the component.\nparent is the component definition,\nparentElements is an array of all the parent elements of where the component is placed\n\nFor example, to only show the input if the component is inside of a Columns component has the input myInputOption set to true, you could write a function as follows:\n\nshowIf: (options, parent, parentElements) => {\n  return options.get('myInputOption') \n    && parentElements.some(el => \n      el && el.component && el.component.name === 'Columns');\n}\n\n\n\nUse the state of other inputs via options to hide or show inputs that depend on one another. For example, you could show an input that opens a link in a new tab only if a link is present, instead of always showing all inputs.\n\n\n\n\nsubFields\n\n\t\n\nInput[]\n\n\t\n\nIf the input type is list , you must include the subFields property that is a list of inputs, with this same schema, for each list item.\n\n{\n      name: 'reviews',\n      type: 'list',\n      defaultValue: [ \n            { reviewText: 'hello' \n     }],\n      subFields: [\n\t{\n          name: 'reviewText',\n          type: 'string',\n          defaultValue: '\"You are \n          the best\"',\n        },\n        {\n          name: 'reviewAuthor',\n          type: 'string',\n          defaultValue: 'Jane Smith',\n        },\n        {\n          name: 'image',\n          type: 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          required: true,\n          defaultValue:\n         'https://cdn.builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d',\n        },\n      ],\n    }\n\n\n\n\nlocalized\n\n\t\n\nboolean\n\n\t\n\nYou can mark any input type with localized to get a separate value for each of the locales configured on your space.\n\n{\n  name: 'title',\n  type: 'text',\n  localized: true,\n}\n\nInput type examples\n\nThis section provides examples of the effects of input types in Builder and covers the following:\n\nInput type name\nDefinition of input type\nAlias/alternative input type you can use instead of the given input type\nScreenshot of input type's effect in Builder's Visual Editor\n\nTip: This section covers the built-in types for custom components, but you can also make your own with plugins. For more information, see Making Your Own Plugins Overview.\n\nboolean\n\nAn input field taking true or false.\n\n  {\n    name: 'darkMode',\n    type: 'boolean',\n    defaultValue: true,\n  }\n\ncolor\n\nProvides a color value, in hex or rgb, to a component.\n\n {\n    name: 'backgroundColor',\n    type: 'color',\n    defaultValue: '#fafafafa',\n  }\n\ndate\n\nTakes same formats as the date constructor for Javascript.\n\n  {\n    name: 'event',\n    type: 'date',\n    defaultValue: 'December 17, 1995 03:24:00', \n  }\n\nemail\n\nCreates an email value for a component.\n\n  {\n    name: 'signup',\n    type: 'email',\n    defaultValue: 'noreply@email.com'\n  }\n\nfile\n\nUploads a file and provides the value as a URL string. Refer to allowedFileTypes for details.\n\n  { \n    name: 'image',\n    type: 'file', \n    allowedFileTypes: ['jpeg', 'png'] \n  }\n\nlist\n\nA collection of items.\n\nAlias: array\n\n{\n      name: 'reviews',\n      type: 'list',\n      defaultValue: [ \n            { reviewText: 'hello' \n     }],\n      subFields: [\n\t{\n          name: 'reviewText',\n          type: 'string',\n          defaultValue: '\"You are \n          the best\"',\n        },\n        {\n          name: 'reviewAuthor',\n          type: 'string',\n          defaultValue: 'Jane Smith',\n        },\n        {\n          name: 'image',\n          type: 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          required: true,\n          defaultValue:\n         'https://cdn.builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d',\n        },\n      ],\n    }\n\n\nTip: list requires the defaultValue option.\n\nlocalized text\n\nA localized text input is a key/value object where the keys are the locales configured in your space. For more information, see Introduction to Localization with Builder.\n\n{\n  name: 'title',\n  type: 'text',\n  localized: true,\n}\n\nlongText\n\nSame as string type but with a multi-line text field editor.\n\n  {\n    name: 'description',\n    type: 'longText',\n    defaultValue: 'Builder is the first and only headless CMS with a powerful \n    drag-and-drop visual editor that lets you build, \n    optimize, and measure digital experiences with speed and flexibility'\n  }\n\n\nTip: If the text is to be formatted, use richText.\n\nnumber\n\nSpecifies that an input field expects a number.\n\n  {\n    name: 'amount',\n    type: 'number',\n    defaultValue: 20,\n  }\n\nobject\n\nA set of specific names and values.\n\n  {\n      name: 'Carousel',\n      type: 'object',\n      defaultValue: {\n         variant: 'primary'\n      },\n      subFields: [\n        {\n          name: 'text',\n          type: 'string',\n          required: true,\n        },\n        {\n          name: 'url',\n          type: 'url',\n          required: true,\n        },\n        {\n          name: 'variant',\n          type: 'string',\n          defaultValue: 'primary',\n          enum: ['primary', 'info', 'dark', 'light', 'warning'],\n        },\n      ],\n    }\n\n\nIf you have large objects with multiple fields:\n\nUse folded so that multiple inputs are rendered collapsed to preserve space on the screen.\nUse keysHelperText to provide helpful copy to the user.\n    {\n      name: 'HugeObject',\n      type: 'object',\n      folded: true,\n      keysHelperText: 'Pick a property to edit',\n      helperText: 'Edit this enormous object',\n      // Example of 30 subfields\n      subFields: Array.from({ length: 30 }).map((_, index) => {\n        return {\n          // Type can be whatever you need\n          type: index % 2 === 0 ? 'text' : 'file',\n          allowedFileTypes: ['jpeg', 'jpg', 'png', 'svg'],\n          name: `prop${index}`,\n          helperText: `The helper text of prop ${index}`,\n        }\n      })\n    },\n\n\nTip: object requires thedefaultValue option.\n\nrichText\n\nDisplays a rich text editor and provides the value as HTML\n\nAlias: html\n\n  {\n    name: 'description',\n    type: 'richText',\n    defaultValue: '<b>This text is bold</b>'\n  }\n\nstring\n\nAny text, usually short in length and unformatted.\n\nAlias: text\n\n  {\n    name: 'buttonText',\n    type: 'string',\n    defaultValue: 'Click',\n  }\n\nTags\n\nTags, usually short text for adding tags to your content entries.\n\n  {\n    name: 'blogTags',\n    type: 'Tags'\n  }\n\nAn example using icons\n\nIf you have a design system that features an icon set, you can use a custom component that takes an icon name as input. In this way, you can manage and distribute your icons across your app. Register your icon component as below:\n\n Builder.registerComponent(Icon, {\n    name: 'Icon',\n    inputs: [{ name: 'icon', type: 'text', enum: ['error', 'warning' ..] }]\n  },\n\nWhat's next\n\nEvery use case is unique. If you need further customization, you can add custom types with plugins.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Learning - Builder.io",
    "url": "https://www.builder.io/c/docs/learning",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nKey Concepts\nReal-Time Collaboration\nLearning Builder\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nLearning Builder\n\nIf you're new to Builder and want to learn your way around, the Builder documentation has articles that cover the basics to get you started. The following categories are based on Builder roles and permissions.\n\nTip: If you're just starting out with Builder, check out Key Concepts first for context on how Builder works and an intro to common terms we use.\n\nContributors and Editors\n\nBecause Contributors don't edit layouts, they can focus on content such as copy and images. To get familiar with Builder, get up and running with our recommended learning path:\n\n1\n\nTour the Builder UI\n\nRecommended docs:\n\nLeft Sidebar\nVisual Editor\nTopbar\n\n2\n\nLearn how to create and edit content\n\nRecommended docs:\n\nBlock Types in Builder\nWorking with Images\nCreating Links\nFor Editors: Using Layers\n\n3\n\nGet acquainted with Builder workflows\n\nRecommended docs:\n\nRequest to Publish\nEditing Your Site Using the Builder Chrome Extension\nAdding Comments to Your Content\nDesigner\n\nTo get off to a good start, Designers should get acquainted with the Builder UI, its features made just for Designers, and how to apply the principles of responsive design in the Visual Editor.\n\nTip: To import your designs from Figma and automatically create responsive designs in Builder, check out Visual Copilot, Builder's workflow for going from a Figma file to Builder and even generating great code in moments.\n\n1\n\nLearn about responsive design\n\nRecommended docs:\n\nIntro to Responsive Design\nThe Box Model\nHow Width Affects Layout\nMargin and Padding\nUsing Breakpoints to Build Responsively\n\n2\n\nGet to know the UI\n\nRecommended docs:\n\nMake a Landing Page\nImporting Figma Designs\nUsing Alignment for Layout\nBest Practices\nAdmin\n\nIf you're an Admin, you might have many varied responsibilities, while still maintaining access and permissions in Builder for your team.\n\n1\n\nLearn about managing your account and users\n\nRecommended docs:\n\nRoles and Permissions\nUnderstanding Organizations\nAccessing Your Invoices\nUnderstanding Pageviews\n\nTip: If you need to create web experiences, make sure to read the documents under Designer, in the previous section.\n\nDeveloper\n\nDevelopers have their own section of the documentation. To get started coding with Builder, visit Developing with Builder, which highlights some of the most frequently used documentation tailor-made for developers.\n\nWhat's next\n\nThis document laid out a roadmap to help you get the information you need to get up and running with Builder. The next step is to play with Builder and start creating with Builder's Popular Tutorials.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nContributors and Editors\nTour the Builder UI\nLearn how to create and edit content\nGet acquainted with Builder workflows\nDesigner\nLearn about responsive design\nGet to know the UI\nAdmin\nLearn about managing your account and users\nDeveloper\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using Alignment for Layout - Builder.io",
    "url": "https://www.builder.io/c/docs/alignment",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nIntro\nCanvas Mode\nArtboard Mode\nThe Box Model\nWidth\nMargin & Padding\nAlignment\nColumns\nFixing Layouts\nChild Layouts\nBreakpoints\nCustomizable Breakpoints\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing Alignment for Layout\n\nWhen you want to place an item on the left, right, top, or bottom of its container, use the Align feature in Builder's Visual Editor.\n\nPrerequisites\n\nTo get the most out of this article, make sure you are familiar with the following:\n\nHow Width Affects Layout\nThe Box Model\nMargins and Padding\nAlignment examples\n\nThe following image shows three image blocks in the Visual Editor. The image blocks are within a full-width gray box: the first box is left aligned; the second is centered; and the third is right aligned.\n\nPutting Blocks in Containers\n\nWhen using alignment, consider placing the item you'd like to align within another container, such as a Box. By nesting a block within another container, you give the block a context for alignment.\n\nIf you don't put the block inside another block, its parent container is then the larger context of the page or section. While a Section block is usually a suitable context, a Page might be too large, with unexpected results, especially as content increases. For more information on conceptualizing your layout, refer to The Box Model.\n\nFind Align settings in the Layout section\n\nThe Layout section is at the top of the Style Tab in the Visual Editor. Use the Layout section to push a block left, right, center, up, down, or make the block full-width. In the Layout section, you can also set a minimum or maximum width on the block, which prevents the block from getting too big or too small.\n\nAlignment and width work together in layouts. This article focuses on alignment. For more information on how to use width effectively in your layouts, refer to How Width Affects Layout.\n\nFill width: make the block full width\n\nTo make a block take up the width of its parent container, select the block and click the Fill width setting in the Layout section of the Style tab.\n\nThe following example features a Box with a gray background and a 20 pixel padding all around to help distinguish the Box for demonstration purposes. Within the Box is an Image block with default settings.\n\nBy default, the image width is 100% and the alignment setting is set to Fill width. With the default settings for the Image and Box blocks, the Image takes up all of the horizontal space.\n\nFor this example, if you wanted the image to fill up the Box all the way to the edge, you'd take the padding off of the containing Box.\n\nIf you were to specify a max-width on the image, the Box would remain full width but the image would be limited in terms of how big it could get. In the following screenshot, the image has a max-width of 300 pixels, so it remains small.\n\nIn this case, though the Image block's alignment is set to Fill Width, the image also has a max-width of 300 pixels on it, which means that no matter what, the image will not exceed 300 pixels. To get this image to go from one side of the gray Box to the other you'd have to remove the max-width\n\nAligning blocks to the left or right\n\nTo align a block to the left, select the block and click the Left Align icon in the Layout section of the Style tab. Make sure you have the block you want to push to the left selected, rather than the block it's nested inside.\n\nTo align a block to the right, select the block and click the Right Align icon in the Layout section of the Style tab.\n\nIf you have an image that is taking up the full width even though you've clicked the Align Left or Align Right setting, put a max-width on the block.\n\nThe following example has a 300 pixel max-width on the image block, which means that the image never gets wider than 300 pixels. If you didn't specify a max-width, the image would take up all the available space, so that aligning the image left would appear to look just like Fill width.\n\nAligning text\n\nWhen you have an Image block or a Box, and you drop a Text block onto it, The Box or Image collapses if it doesn't have a specified height, as in the following example. This is natural browser behavior because images nor boxes don't have an inherent height.\n\nTo keep the Image or Box from collapsing, specify a minimum height in the Layout section of the Style tab. The image in the following example has a min-height of 600 pixels, which prevents it from ever being any smaller than 600px tall. The minimum height can vary and depends on the size of your image.\n\nWhenever you set heights or widths, be sure to check Tablet and Phone views and adjust settings for smaller screens.\n\nCentering blocks horizontally\n\nTo center a block horizontally, select the block and click the Center Horizontally icon in the Layout section of the Style tab.\n\nIn the following image, the text block is centered horizontally. This automatically causes the width of the text block to shrink to its contents. To edit the spacing of the text block, refer to Margin and Padding.\n\nTop-aligning blocks\n\nTo place a block at the top of its containing block, select the block you want to move and click the Top Align icon in the Layout section of the Style tab.\n\nIn the following image, the text block is aligned to the top of its parent container, which in this case pushes the text block to the top edge of the image.\n\nVertically centering a block\n\nTo center a block vertically, select the block and click the Center vertically icon in the Layout section of the Style tab.\n\nIn the following image, the text block is aligned to the vertical center of its parent container.\n\nAligning a block to the bottom\n\nTo push a block to the bottom of its parent container, select the block and click the Align bottom icon in the Layout section of the Style tab.\n\nIn the following image, the text block is aligned to the vertical center of its parent container.\n\nNext steps\n\nIf you've read through The Box Model, How Width Affects Layout, Margin and Padding, along with this article, checkout Using Columns to Build Responsively to bring all these responsive building skills together.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nAlignment examples\nPutting Blocks in Containers\nFind Align settings in the Layout section\nFill width: make the block full width\nAligning blocks to the left or right\nAligning text\nCentering blocks horizontally\nTop-aligning blocks\nVertically centering a block\nAligning a block to the bottom\nNext steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "How Width Affects Layout - Builder.io",
    "url": "https://www.builder.io/c/docs/width",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nIntro\nCanvas Mode\nArtboard Mode\nThe Box Model\nWidth\nMargin & Padding\nAlignment\nColumns\nFixing Layouts\nChild Layouts\nBreakpoints\nCustomizable Breakpoints\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nHow Width Affects Layout\n\nA primary factor in how a block behaves across devices is its width. Builder's blocks already have default width settings, which make them ready to use in responsive layouts.\n\nThe following article describes the most common width settings and how they impact block behavior.\n\nMost frequently used styles, including width, are available as GUI (Graphical User Interface) controls in the Style tab. We recommend that you use the block's default, but if you need to make adjustments, go to the Style tab.\n\nThe following image shows the Style tab for an image with a width set to auto.\n\n👉 Note: Since you can build entire responsive layouts with no code in Builder, this article doesn't cover custom CSS. To add or edit custom CSS on a selected element, you can use the CSS Properties section of the Style tab.\n\nUsing auto width\n\nAuto width helps blocks respond gracefully to variation in screen size. If a block is behaving in unexpected ways, check that its width setting is auto and then check the width of any block within which it is nested.\n\nIn the following screenshot, the Box that the image is in and the image both have a width of auto, which means both are responsive. The auto width takes into account any margins, padding, or border on the image, which keeps the image from overflowing its container.\n\nUsing percentage width\n\nA block with 100% width makes the block 100% the width of its container, but doesn't include the margin, padding, or border in the calculation. In this case, the block can overflow its container, because the padding and margin are making it too big for the space it's in.\n\nIn the following screenshot, the image is overflowing its containing box. To display the elements and their relationships to one another, turn on X-ray mode, which displays bounding boxes, nesting/hierarchy, margin and padding.\n\nIn this screenshot, the Box has a pixel width and the image inside the Box has a 100% width and a margin, which causes the image to be too big for the Box. When this configuration repeats over multiple elements on a page, the layout breaks as the screen size shifts.\n\nIf you need to use a percentage width for a block, be sure to set its margins, padding, and border to 0. With percentage width, if you still need spacing around the block, put the margin or padding on the containing block that the image is in, not on the block itself. In addition, check to make sure that the containing block doesn't have a fixed width setting, that is a pixel width. Instead, use width auto or 100%.\n\nUsing the Section block for full width\n\nUse the Section block when you need a section to span the whole screen but you want to limit how wide the content within the Section gets.\n\nDrag and drop a Section block into the work area from the Insert tab. The Section block is unique in that its width is set in vw, or units of viewport width. 100vw, the default Section width, means that the Section spans the entire width of the viewport. The browser window is a common viewport.\n\nWhile the Section block width is relative to the viewport as long as the width is in the default of vw, the contents of the Section have a maximum width of 1200 pixels by default. This means that you can place other blocks inside the Section block and they won't get bigger than 1200 pixels wide, which is friendly to wide screens.\n\nIn preview mode the Section expands to the edges of the browser, while the content stays within its 1200 pixel maximum width.\n\nThe following image shows the difference between a Section and a Box. The Section, with its 100 viewport width expands all the way to the edges of the viewport, while the Box is constrained in width by default.\n\nIf a block had a width of 50vw, it would be half of the viewport width, regardless of the size. This resembles percentage widths except that the width of vw is relative to the entire viewport, such as the browser window. A percentage width on a block, however, is relative to the parent container, which could be a small part of the viewport. So if you put a viewport width on a block, that block's width is now is calculated based on the viewport size and doesn't reference its parent container.\n\nIn the following image, A Section at 100vw is inside of a Box block. The Box block is constrained in width but the Section width does not take into account the width of the Box because the Section width is set in viewport units.\n\nA possible use case for this configuration is if you had a layout where most of the areas of content were constrained but you wanted a section to expand beyond everything else.\n\nNext Steps\n\nBuild upon your understanding by reading Margin and Padding, which covers what margin and padding are, how they affect block width, and when to use them.\n\n\n\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nUsing auto width\nUsing percentage width\nUsing the Section block for full width\nNext Steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Understanding margins and padding - Builder.io",
    "url": "https://www.builder.io/c/docs/margin-padding",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nIntro\nCanvas Mode\nArtboard Mode\nThe Box Model\nWidth\nMargin & Padding\nAlignment\nColumns\nFixing Layouts\nChild Layouts\nBreakpoints\nCustomizable Breakpoints\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nMargin and Padding\n\nUse margin and padding to space blocks from each other and change the space between a block's content and border.\n\nAn example of margins is the space between tiles on a page. If you don't want the tiles all touching each other, you'd add margins to put some space between them.\n\nAn example of padding is making a button wider and taller so that it is easier touch with a fingertip or broad pointer.\n\nThink of padding like the stuffing you put in a pillow to make it bigger. Think of margins as the space between the pillows.\n\nMargins\n\nA margin is the space around the outside of a box. The following image features three boxes in a row on a webpage. The space between the boxes is margin.\n\nAdjusting margins\n\nTo adjust margins, take the following steps:\n\nSelect the block that needs margin adjustments.\nGo to the Margin & Padding section of the Style tab.\nAdjust the values in the outer rectangle to set the margin.\n\nYou can use any legal CSS unit for the value, such as percentage, ems, rems, or pixels (px).\n\nThe following video demonstrates adjusting the margin settings on a Text block. As the margin values change, the Text block moves further from or closer to the blocks above and below as well as either side.\n\nPadding\n\nPadding is the space inside of a box, specifically the space between the content, such as copy, and the border of the box.\n\nThe following image features three boxes in a row on a webpage. The space within each box, between the content and the border is padding.\n\nTo adjust padding, take the following steps:\n\nSelect the block that needs padding adjustments.\nGo to the Margin & Padding section of the Style tab.\nAdjust the values in the inner rectangle to set the padding.\n\nYou can use any legal CSS unit for the value, such as percentage, ems, rems, or pixels (px).\n\nThe following video demonstrates adjusting the padding settings on a Text block. As the padding values change, the Text block grows or shrinks while its margins–the distance from the top and bottom boxes, as well as either side–remains unchanged.\n\nMargin and padding are best for adding space around and inside of a block. Though sometimes adjusting these settings can make it appear as though the block position is changing, the margin and padding still take up space and affect the flow as the page attempts to adjust to different screen sizes.\n\nInstead, use Alignment settings in the Style tab to significantly adjust the location of an item within its containing block. Reserve margin and padding for basic styling rather than overall layout. By sticking to these guidelines, and leveraging Builder's built-in responsive styles, you'll be able to concentrate more on connecting with your users.\n\nNext steps\n\nUnderstanding margin and padding are integral to great layout. For more information on using Builder to create responsive layouts, read Using Columns for Responsiveness, which covers how Builder's built-in Columns block adapts to different screen sizes automatically.\n\n\n\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nMargins\nAdjusting margins\nPadding\nNext steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Glossary - Builder.io",
    "url": "https://www.builder.io/c/docs/glossary",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nGlossary\n\nThe following glossary defines Builder and web design terms that appear in the Builder documentation and other resources.\n\nA/B testing\n\nWith A/B testing, you create multiple variations for a page and test them with your site visitors. You can style these variations differently, and these variations will be shown at random to your users. You'll also have access to the metrics for your different variations.\n\nAlign icons\n\nAlign icons move your content — for example, text — to the left, middle, or right of a page.\n\nBox\n\nBoxes are containers for grouping content. A Box contains other blocks, such as Text blocks or Columns. By grouping content in a Box, you can apply styles to that Box and its contents inherit those styles.\n\nBlock\n\nBlocks are the fundamental elements you drag onto the work area as you create in Builder's Visual Editor. Examples of blocks include an Image block, a Text block, a Box block, and Columns.\n\nChild\n\nA child emement is a piece of content that is nested inside of another element.\n\nChild layout\n\nUse a child layout section to arrange nested elements in their parent container.\n\nContent entry\n\nA content entry is a piece of content; that is, an instance of content, necessarily based on a model. Examples of content entries include Sections and Pages, which Builder lists in the Content section.\n\nCSS\n\nCSS, which stands for Cascading Style Sheets, is one of the fundamental technologies of the web, and gives Pages and Sections their style. Style, or styles, in web development refers to features of layout such as placement, colors, typography, borders, shadows, and certain animations. CSS has a unique syntax and engages with the Box Model, a key part of Responsive Design.\n\nData model\n\nThe definition of Data within a Space. For example, a blog author data model might include fields for author name, bio, job title, and handle For more detail, see Data Models.\n\nDynamic content\n\nDynamic content is content that changes, such as on hover, click, or keypress.\n\nElement attributes\n\nElement attributes are identifiers you can add to an element to control that element's behavior. You can add custom element attributes to your content such as an id, class name, or a default state of checked for checkboxes. You can find the Element Attributes section near the bottom of the Style tab.\n\nEnvironment\n\nAn environment is a special kind of Space that replicates and engages with your main Space so that you can create environments such as Production, QA, Staging, or QA. With environments, you can push and sync content and models between different environments. Requires an Enterprise plan.\n\nFor more information including demo videos, refer to Enabling Environments.\n\nFlexbox\n\nFlexbox is a CSS layout model in which the children of a container can be laid out in any direction, and can “flex” their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated.\n\nHistory\n\nThe history tab is where you can view your page in past states and revert back if needed. You can also view a comparison of your current page and a past state.\n\nFor more information, see the History guide.\n\nInsights\n\nThe Insights tab features a heat map, engagement, and conversion rates for your page.\n\nModel\n\nA model is the definition of a type of content, such as a Page model or Section model. Models are the basis of content entries. For more detail, see Intro to Models.\n\nMargin\n\nMargin is the space on the outside of a piece of content. For more detail, read Margin and Padding.\n\nOrganization\n\nThe topmost level of a Builder account. A company has one Organization that contains its Spaces. For more detail, refer to the Organizations documentation.\n\nPage Model\n\nThe definition of a Page within a Space. Builder comes with a default Page Model that you can use to make as many Pages as you need. For more detail, see Page Models.\n\nPadding\n\nPadding is the space on the inside of your content.\n\nParent\n\nA parent element is a block that acts as a container for other blocks.\n\nPreview mode\n\nPreview mode, available under the eyeball icon in the upper right of Builder's Visual Editor beside the Publish button, gives you an accurate view of what your webpage looks like before publishing.\n\nPublic API Key\n\nPublicly visible, alphanumeric ID of a Space that you use to integrate your code base and fetch data. For more information see Using Your Public API Key.\n\nSDK\n\nA Builder SDK, or software development kit, is a special set of tools for a JavaScript framework (Builder offers SDKs for all the major JavaScript frameworks) to help with integration with Builder. For details on the latest SDKs, visit SDK Comparison.\n\nSection\n\nA Section is a discrete content entry that you can use within a Page. Examples include banners and tiles.\n\nSection model\n\nThe definition of a Section within a Space. You can create Section Models and use them to make as many Sections as you need. For more detail, see Section Models.\n\nSpace\n\nA place within and Organization where you work on a project and where you integrate your code. For more detail, see Spaces.\n\nSymbol\n\nA Symbol is a piece of reusable content that you can drag and drop onto a Page or Section. By default, any changes you make to a Symbol and publish update that Symbol everywhere you are using it. To prevent this default behavior, you can make the Symbol inline, which turns it into a regular block.\n\nTemplate\n\nA template is a piece of reusable content that you can drag and drop onto any page, but differs from a Symbol in that any changes you make to an individual instance of template does not update other instances of that template elsewhere.\n\nVisual Copilot\n\nVisual Copilot is a workflow that includes using the Builder Figma Plugin to import your Figma design into Builder, automatically apply responsiveness, and generate dev-friendly code.\n\nWeb app\n\nWeb application, web app for short, refers to an application that runs in the browser. The Builder web app is the Builder software that customers access by logging in. The Builder web app includes the Visual Editor user interface (UI), and all of the other parts of Builder accessible with a Builder login.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nA/B testing\nAlign icons\nBox\nBlock\nChild\nChild layout\nContent entry\nCSS\nData model\nDynamic content\nElement attributes\nEnvironment\nFlexbox\nHistory\nInsights\nModel\nMargin\nOrganization\nPage Model\nPadding\nParent\nPreview mode\nPublic API Key\nSDK\nSection\nSection model\nSpace\nSymbol\nTemplate\nVisual Copilot\nWeb app\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder best practices - Builder.io",
    "url": "https://www.builder.io/c/docs/best-practices",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nBest Practices\n\nIn traditional web development, you can do just about anything in a number of different ways, but usually, one way offers more benefits than the others.\n\nWith the Builder Visual Editor, you are working with the underlying front-end code to access all of the robust features of modern development. Because of this, just as with code, you can do things in many ways with Builder.\n\nAccessibility\n\nAccessibility is an integral best practice for every stage of designing, developing, publishing, and iterating on all content.\n\nBuilder gives you the tools to create and iterate. However, as each use case is different, and because you can build an infinite array of digital experiences, just as if you were entirely coding your project, you must familiarize yourself with creating and maintaining accessible content.\n\nMake sure that as you develop your projects in Builder that your content is accessible as defined by the World Wide Web Consortium(W3C), an international organization that develops and maintains web standards.\n\nThis document contains some instructions on where to edit your content along with links to accessibility resources in addition to W3C, such as WebAIM, a recognized leader in the field of web accessibility. For introductory guidance, refer to Web Accessibility for Designers.\n\nLayout\nImportant: learn about responsive design\n\nMany best practices assume a responsive foundation. Responsive design is a best practice in and of itself, whether you're coding or using a visual tool such as Builder.\n\nThis section shares some pointers, but to get a solid foundation in how to build successfully, whether you're coding or using a visual tool like Builder, read through the Builder Responsive Design documentation.\n\nThe Responsive Design docs explain the vital concepts of how browsers calculate what they display, width, margin and padding, alignment, columns, and fixing layouts, all with responsiveness in mind. And these docs are written from a no-code perspective, so anyone can learn how to build great responsive designs.\n\nKeep pages short\n\nIn general, keep pages brief and to the point. Too much content can slow down your page and lead to lower conversion rates. Instead, create more, shorter pages with focused content and link to other pages of similar scope.\n\nMake blocks full width with Full Page Width\n\nWhen making a block as wide as the viewport, use the Full Page Width setting in the Style Tab. Though you can use a function manually in the CSS, the Full Page Width setting is quicker, intuitive, and prevents typos.\n\nThe following image shows where to find the Full Page Width setting in the Layout section of the Style Tab.\n\nKeep Section blocks top-level\n\nNesting, or putting one thing inside of another, is generally a useful practice in web development; but Section blocks are best for containing other elements, rather than being themselves contained.\n\nWhile you can safely nest items inside of Section blocks, don't nest Section blocks inside of other blocks.\n\nA Section block's default styles are specifically for making the Section expand the entire viewport, so to use Section blocks with reliable, predictable results, keep them top-level, which means they can contain other blocks but should not be nested within other blocks.\n\nThe following image shows a Section block at the top-level in the Layers tab.\n\nNesting is useful for organizing, but avoid nesting too deeply as controlling the hierarchy depth helps keep the structure clear, which is helpful later for others who might work on what you've built.\n\nStyling blocks\n\nUse the Style tab's graphical settings to style blocks. By relying on Builder's default styles and the Style tab's graphical settings, your design is more flexible and easier to maintain. Most of Builder's blocks are responsive out-of-the-box, which frees you to focus on the look and feel.\n\nBy using the graphical settings in the Style tab, and leaving the manual CSS styles to developers and designers versed in the nuances of CSS for responsiveness, your blocks and layouts become easier to iterate on and maintain.\n\nGive targets recommended padding\n\nWhen adding padding to a button, form element, or other target element, make sure it's big enough to accommodate a range of pointer inputs, such as a mouse, pen, or touch.\n\nThough the recommended minimum of 24 pixels by 24 pixels is W3 Level AA accessible, the web development industry conventional standard of the enhanced Level AAA is 44 pixels by 44 pixels or the equivalent, which is informed by the W3 Web Content Accessibility Guidelines.\n\nFor instructions on how to use margins and padding in Builder, check out Margins and Padding.\n\nHiding a block\n\nTo hide a block, you can toggle the visibility on desktop, tablet, or mobile from the Visibility section of the Style tab. This toggle is preferable to changing the opacity for performance, especially in the case of sizable content.\n\nShowing a block under certain conditions\n\nWhen you want to show a block under specific conditions, use the showIf setting in the Data tab, rather than setting the opacity to zero. With the opacity set to zero, the user still has to load the element you've hidden, which can negatively impact performance.\n\nFor instructions on using showIf, refer to this blog post.\n\nText\nUse Text blocks correctly\n\nSet Text Blocks according to their semantic meaning. That is, if it is an h1, select Heading 1 from the Text dropdown in the Edit settings–if it's an h2, select Heading 2, and so on. Semantic Text Blocks improve accessibility, make styling easier, and are consistent with Shopify themes.\n\nFor semantic heading markup, use only one h1 on a page and follow a clear hierarchy by making the next level of headings h2, and those headings nested within an h2 section h3.\n\nConsider typeface and font size\n\nIn addition to color and contrast, you can improve the readability of text by carefully choosing the typeface and font size. Color, contrast, font size, and typeface all play a joint role in readability.\n\nTo edit text styles:\nGo to the Style tab.\nIn the Typography section, specify settings as needed.\n\nFor detailed information on text accessibility, refer to:\n\nWebAIM's Typefaces and Fonts\nWebAim's Links and Hypertext\nPaste text without styles\n\nWhen copying text from another app and pasting that text into Builder, you might inadvertently paste the styles along with the text. To paste without styles in Builder, use one of the keyboard shortcut:﻿\n\nOn a Mac, Cmd/Ctrl + Shift + v\nOn a PC, Ctrl + Shift + v\nColors and contrast\n\nWhen you're choosing colors for backgrounds, text, diagrams, or images, make sure the color contrast is accessible. To check if the colors you're using are accessible, use the WebAIM Contrast Checker. Enter your colors in the Contrast Checker to test if they pass accessibility standards.\n\nTo find the rgb or hex code for a color that's set in the Builder Visual Editor:\n\nSelect the element where the color is set. For example, if the color is on the text, select that Text block.\nGo to the Style tab and go to the appropriate section. For example, if adjusting text color, expand the Typography section and click on the color swatch to display the color picker, which contains the hex and rgb codes.\nCopy the code you need and paste it into the appropriate WebAIM Contrast Checker field.\n\nIf the colors don't pass the WebAIM Contrast Checker, make adjustments in the checker to find colors that do pass. Paste the color codes that do pass into the Builder color picker.\n\nTo change colors in the Visual Editor:\n\nSelect the block you want to change.\nGo the Style tab.\nFor background colors, use the Background settings. For text, use the Typography settings.\n\nThese instructions are for colors set manually within the Visual Editor Style tab. As an alternative to setting colors manually, your developer can specify colors in a data model and you can bind to the colors. In this way, when the color changes in the model, all bindings automatically update the content to which they are bound.\n\nFor details on using data models for creating a Site Theme for managing colors, see Create a Site Theme.\n\nTip: These instructions for changing colors assume that you are using the Builder Visual Editor to set your colors and that you have access to change styles. However, many teams rely on Designers and Developers to specify colors in the CSS that blocks in Builder inherit.\n\nIf you find that changing the settings in the Style tab doesn't affect the change you want, you may want to reach out to your team's CSS point person.\n\nImages\n\nAlways use an Image block to add an image, rather than setting the image as a background on a block. Builder's Image block optimizes the image; however, the background image setting does not. Additionally, the Text block's alt text makes the block more accessible to screen readers than background images.\n\nAlways add alt text to images for accessibility. Make sure to use punctuation on alt text so that the screen reader pauses appropriately when reading the copy. You can find the Alt Text field by clicking the Edit button on the Image block.\n\nImportantly, get familiar with the importance of alt text for accessibility by reading WebAim's Alternative Text.\n\nFor more information on the Image block in Builder, refer to Working with Images.\n\nProvide information in a variety of ways\n\nUse a combination of methods to convey information. Text, along with images, diagrams, videos, or other elements can help support differentiated access to information.\n\nWhat's next\n\nFor more best practices check out the following:\n\nFor detailed layout best practices, refer to the Box Model and Fixing Responsive Layouts.\nFor more information on web accessibility, refer to the WebAIM Introduction to Accessibility.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nAccessibility\nLayout\nImportant: learn about responsive design\nKeep pages short\nMake blocks full width with Full Page Width\nKeep Section blocks top-level\nStyling blocks\nGive targets recommended padding\nHiding a block\nShowing a block under certain conditions\nText\nUse Text blocks correctly\nConsider typeface and font size\nPaste text without styles\nColors and contrast\nImages\nProvide information in a variety of ways\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "How Builder Uses AI - Builder.io",
    "url": "https://www.builder.io/c/docs/ai-use",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nHow Builder Uses AI\n\nBuilder uses AI (Artificial Intelligence) in certain features and workflows to help customers speed up design and development time.\n\nThis document covers how Builder incorporates AI and how Builder's AI workflows engage with your data.\n\nData collection and privacy\n\nYour privacy is of paramount importance. Here's how we approach your data:\n\nData privacy and storage. No customer data is used for training AI models.\nMinimal data collection. For features that use OpenAI, we send OpenAI only the data in prompts and, if applicable, the text or content being edited. This data is necessary for the AI to help with your request. Other AI models we use are entirely internal to Builder and do not store customer data. OpenAI does not train on your data.\nUsage. Data is strictly used for providing the requested service. There's no secondary usage.\n\nCurrent Builder.io privacy policies apply to all Builder features, including AI features. Builder does not retain any AI-generated data except in cases where we need to debug an issue.\n\nAbout the AI models Builder uses\n\nBuilder uses two types of AI models:\n\nBuilder's proprietary, privacy-first AI models\nAn OpenAI LLM\nBuilder's proprietary, privacy-first AI models\n\nBuilder's proprietary AI models are fully built and trained internally and hosted on Google Cloud. In this way, these models do not engage with any third party besides Google Cloud, which Builder already uses for all Builder systems.\n\nBuilder uses proprietary AI models to:\n\n\nPrepare your Figma file with the Figma plugin\nImport your design\nMake your Figma design responsive in the Visual Editor\nGenerate \"fast\" code\nWhere Builder uses OpenAI\n\nSome, but not all of Builder's AI features, use an OpenAI fine-tuned LLM. Currently, Builder uses OpenAI to:\n\nGenerate images\nGenerate and edit content\nGenerate and edit text\nGenerate \"quality\" code\nFeatures that use AI\n\nBy understanding which Builder features use AI, how they use AI, and which models they use, you can make informed decisions and be intentional with your workflow.\n\nRecognizing AI in Builder\n\nThough there's a growing feature set using AI in Builder, you can still create and manage your Builder content without using the AI-enhanced features.\n\nAI features in Builder's Visual Editor have indicators including a magic wand icon and text that states that the feature uses AI.\n\nThe features in which AI is available in Builder include:\n\nImage generation\nText generation and editing\nContent generation and editing\nVisual Copilot\nGenerating quality code\nAny feature with a magic wand icon\nThe image below shows a few examples of Builder features that use AI. The examples here are, from the top left: the Visual Editor AI section of the Insert tab, the Visual Editor AI dialogue, the AI Text Editor dialogue, the Builder Figma plugin, and the Generated Code interface.\n\nTo determine if a feature in the Visual Editor uses AI, you can check for copy that states it's an AI feature or hover your cursor over any field. If AI is available for that field, a magic wand icon appears on hover.\n\nThe image below shows several examples of the magic wand icon, which when clicked, open the AI Text Editor where you can generate or edit text. Notice that this is a hover state and the icon doesn't show if you don't hover over the field.\n\nGenerating or editing with AI\n\nImage generation, text generation and editing, and content generation and editing use a fine-tuned LLM at OpenAI to process requests. The following sections show how a prompt is submitted to the LLM and the image, text, or content are returned.\n\nImage generation\n\nWhen you use the Visual Editor to generate an image, the prompt that you give in the AI Generate dialogue goes to OpenAI, which in turn creates the image. No additional data is sent.\n\nThe diagram below shows this flow:\n\nText generation and text editing\n\nWhen you use the Visual Editor to generate or edit text, the prompt that you give in the Visual Editor AI dialogue goes to OpenAI, which in turn creates the copy. If you're editing existing copy, the original text is included in the prompt.\n\nThe diagram below shows this flow:\n\nContent generation and editing\n\nWhen you use the Visual Editor to generate or edit content, the prompt that you give in the Visual Editor AI dialogue goes to OpenAI, which in turn creates the content. For editing, the specific content being edited is converted to code and sent.\n\nThe diagram below shows this flow:\n\nAI in Visual Copilot\n\nVisual Copilot is a workflow that leverages AI to the labor-intensive tasks in moments. This workflow uses AI in Builder Figma to Code plugin's process, creating a responsive design in Builder's Visual Editor from the Figma import, and in generating quality code.\n\n\nWhen you use Visual Copilot, Builder's proprietary AI models and OpenAI are involved at several, but different points in the process.\n\nBuilder's Figma plugin sends your design to Builder's proprietary AI models. These models are hosted on Google Cloud (as is all of Builder's infrastructure) to ensure privacy and data security.\nYour design is imported to Builder.io.\n\nAt this point you can publish your site using Builder's APIs and SDKs. This option only relies on Builder's private, in-house AI models.\n\nOR\n\nAlternatively, you can generate code. When generating code, you have two options:\n\nFast code: this uses a Mitosis compiler without AI.\nQuality code (optional): this uses a fine-tuned LLM at OpenAI. Open AI does not train on your data.\n\n\nTip: When the Builder Figma plugin generates code, it bases the code strictly on your Figma file — not on anyone else's code or designs.\n\nThe diagram below charts this process:\n\nFor more information, read about OpenAI's training processs and visit OpenAI's Security Portal.\n\nWhat's next\n\nFor more information on AI features in Builder, visit Visual Copilot.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nData collection and privacy\nAbout the AI models Builder uses\nBuilder's proprietary, privacy-first AI models\nWhere Builder uses OpenAI\nFeatures that use AI\nRecognizing AI in Builder\nGenerating or editing with AI\nImage generation\nText generation and text editing\nContent generation and editing\nAI in Visual Copilot\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using AI to Create Content - Builder.io",
    "url": "https://www.builder.io/c/docs/ai",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing AI to Create Content\n\nin beta\n\nBuilder's AI features help you use natural language for a range of tasks, including content creation and editing, image and content generation using your components, and the creation of mini apps.\n\nTip: Any field in Builder that features a magic wand is editable with AI. Click the Magic Wand button to open the AI dialogue and tell the AI, using natural language, how you'd like the content changed.\n\nAI as an emerging technology\n\nWhile AI offers significant benefits and improvements to workflows, it is important to understand its potential limitations. We recommend taking the time to familiarize yourself with the technology and to start using AI features in a considered manner as it continues to mature.\n\nGenerating content\n\nTo use AI to generate content in the Visual Editor:\n\nIn the Insert tab, expand the Visual Editor AI section.\nClick the Generate New Content button.\nIn the dialogue that opens, describe the type of content you'd like to generate. For example, \"A page with a hero image at the top and 3 columns with 3 rows of tiles\".\nProvide a website as style inspiration.\nClick Generate.\nWhen the generation is complete, the dialogue displays options based on your prompt.\nClick on the one you'd like and then click in the Visual Editor work to drop in the design.\n\nThe above video demonstrates this process.\n\nEditing content\n\nTo edit content with AIin the Visual Editor:\n\nSelect the block you'd like to edit.\nClick the Edit Existing button. Alternatively, click the magic wand button that shows when you select the block.\nIn the dialogue that opens, describe the type of edit you'd like to make.\nClick Modify.\n\nThe above video demonstrates this process.\n\nExample instructions to the AI might include:\n\n\"Make the font bigger\"\n\"Change the background color and add some padding.\"\n\"Translate copy into another language, as in the following sections of this document.\"\nUpdating multiple Text blocks\n\nTo edit multiple Text blocks with AI in the Visual Editor:\n\nSelect the blocks you'd like to change.\nClick the Magic Wand button or press Cmd/Ctrl+o.\nIn the dialogue that opens, tell the AI what you'd like to change about the copy; for example, the tone.\nClick Modify.\n\nThe following video demonstrates changing the tone of multiple Text blocks from formal to friendly and informal:\n\nGenerating images\n\nTo add an AI-generated image:\n\nDouble-click or select and click the Edit button for a block.\nIn the Photo dialogue that opens, click on AI Generate.\nClick Generate.\nAI generates a selection of images.\n\nThe following video demonstrates generating images and selecting one:\n\nGenerating content with your components\n\nexperimental\n\nAn experimental feature, the AI Components Generator creates pages or sections, per your instructions, using your custom components.\n\nYou must have a selection of custom components for the AI to have something to work with. For details, read Integrating Custom Components.\n\nUsing AI to generate content with your own components:\n\nPress Cmd/Ctrl+k to open the Command Palette.\nIn the dialogue that opens, describe the type of content you'd like.\nClick Generate.\nAI generates a page or section, depending on your instructions. Tweak as needed.\n\nThe AI Components Generator dialogue provides two toggles that can help you guide the generation process:\n\nInclude built-in components: Specify if you'd like the generator to use the Builder built-in components.\nAllow custom styles: Specify whether or not to use your own styles or styles generated by the AI. This feature is helpful for aligning with established design systems.\n\nThe following video demonstrates generating a page based on instructions and using custom components:\n\nGenerating mini apps\n\nexperimental\n\nAn experimental feature, the Mini App Generator creates small apps within the Visual Editor.\n\nPress Cmd/Ctrl+k to open the Command Palette.\nIn the dialogue that opens, describe the type of app you'd like to make.\nClick Generate.\nAI generates a small app.\n\nThe following video demonstrates generating a small mini app:\n\nFor more information on the use of AI in Builder, including privacy, read How Builder Uses AI.\n\nWhat's next\n\nTo leverage more AI features in Builder, visit Visual Copilot.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nAI as an emerging technology\nGenerating content\nEditing content\nUpdating multiple Text blocks\nGenerating images\nGenerating content with your components\nGenerating mini apps\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Best Practices with Builder's Figma Plugin - Builder.io",
    "url": "https://www.builder.io/c/docs/figma-best-practices",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nBest Practices with Builder's Figma Plugin\n\nThough Builder's Figma Plugin is designed so you don't have to prepare most design files, every design is unique, and some could use a little extra attention.\n\nIf your design could benefit from a little help when importing, try some of the techniques in this document.\n\nTip: Builder's Figma Plugin is currently in beta, meaning it's in active development and improvement. Your experience and feedback are integral to our iterative process — share your feedback.\n\nGroup layers for backgrounds and images\n\nGroup layers that constitute background elements together. Creating a dedicated group for background elements simplifies the structure and enhances the output when exporting as an image.\n\nThe image below shows an example of multiple background layers that can be grouped.\n\nMinimize overlapping and intersections\n\nWhen overlapping elements, align boxes only with related components. If layers don't need to overlap, position their selection boxes so that they don't overlap or touch.\n\nAdditionally, minimize intersections between elements, as intersections can lead to undesirable results. If challenges persist regarding overlapping or intersecting elements, consider grouping them together, similar to a background.\n\nThe next image shows two text boxes that are overlapping when they could instead be closer to their contents without changing the layout.\n\nExplicitly define images\n\nFor complex designs featuring numerous visual elements, it's important to help the AI model recognize them as a single image. Use the export feature to define an export for an element explicitly. This guides the AI in identifying it as an image with certainty.\n\nSelect the element and expand the Export section by clicking the plus button next to Export as in the following video.\n\nUse Auto layout\n\nUse Auto layout to organize elements and create frames. Auto layout aids in encouraging the correct behavior of the AI model, particularly in complex designs. It provides grouping as frames, offering additional insights that assist the AI model in handling complex constraints effectively.\n\nThe image below shows where to find Figma Auto layout.\n\nAvoid translucent effects\n\nTransparency effects, such as translucency or opacity, can pose challenges in the interpretation of the design. It's advisable to avoid using translucent effects, as they may not be well-supported and can result in unexpected outcomes.\n\nThe image below shows a layer with 100% opacity and a layer with transparency applied in a gradient. Transparency in any form can be tricky for AI to understand, so, if possible, we recommend sticking to fully opaque colors.\n\nSize text bounding boxes correctly\n\nKeep text bounding boxes snug to the text within them, rather than much larger than the text. Excessive space in the bounding box can lead to issues in the output, including extra whitespace and line breaks within text layers.\n\nThe image below shows two text boxes; one has the boundaries snugly fit to the content, which is the preferred technique. The other, image shows a text box that is way too big, which can be challenging for AI.\n\nConsider design sizes\n\nDesign elements to closely match real-world dimensions for accurate and practical results. Use a scale that aligns with the intended output size.\n\nExtreme scaling may necessitate adjustments that impact the overall design. If your design has a large scale, consider addressing it within the Figma plugin or communicating with developers for optimal results.\n\nThe next image shows a page design (left) that is designed close to the final size of the finished product as well as a page that is much larger than the final product will end up. Be sure to provide the plugin with the size you'd like your design to be when it's finished.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nGroup layers for backgrounds and images\nMinimize overlapping and intersections\nExplicitly define images\nUse Auto layout\nAvoid translucent effects\nSize text bounding boxes correctly\nConsider design sizes\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Visual Copilot - Builder.io",
    "url": "https://www.builder.io/c/docs/visual-copilot",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nVisual Copilot\n\nin beta\n\nVisual Copilot is a suite of Builder tools to help you get your designs published faster than ever.\n\nThis document guides you through the recommended workflow and links to detailed documentation.\n\nTip: Though this document outlines a full workflow, you can use each process on its own.\n\nImport your Figma designs\nIf you have designs in Figma, you can import them directly into Builder using the Builder Figma plugin.\n\nThe key takeaways are:\n\nYou need a design in Figma and the Builder Figma Plugin.\nNo prep needed—no need to rasterize, apply auto layout, or think about responsiveness. \nDesigns are imported responsive.\nYou can import whole designs of one Page or portions of a design. If you have multiple designs, such as multiple screens, you import each into its own content entry.\nMake sure you use the Builder Figma plugin because that's how Builder prepares and imports your work.\nYou might have to tweak the imported content. Since it's in beta, always check that your design is as intended at all viewport widths.\n\nFor detailed instructions, read Importing from Figma with Visual Copilot.\n\nGenerate code from your content entries\n\nWhether you've imported your Figma designs or created them in Builder, you can export generated code with the help of AI.\n\nThe key takeaways are:\n\nTwo qualities of code are available—Fast (instant) and Quality (like a great dev wrote it).\nBoth types of code are generated with AI.\nQuality code is generated to create dev-friendly, semantically correct code.\nThe amount of Quality code you can generate is based on your plan.\nYou can customize Quality code with a chat like interface to specify framework, styling, and countless other custom requirements.\nIterate on Quality code right in the Code Generator by prompting the AI.\n\nFor more information, read Generating Code with Visual Copilot.\n\nSync generated code to your codebase\n\nWhen you've generated code for your content entry, you can sync the code from within the Generated code panel.\n\nThe key takeaways are:\n\nSync to your codebase with a command or with Devtools.\nDevtools isn't required, but it takes care of the details of integrating for you if you want to integrate.\nThough an integrated app isn't required, it makes syncing and publishing your updates seamless.\nYou control when the code is synced to your codebase so you can iterate the Generated code until you're happy.\n\nFor more information, read Generating Code with Visual Copilot, which covers syncing in addition to code generation.\n\nPublish designs to your site or app via API\n\nAfter converting a design to code using Visual Copilot, you can integrate the design directly into your site or app over our SDKs and APIs\n\nOpen the component or page in your site or app’s codebase where you want to integrate the design.\nIntegrate the Builder SDK or API in the component or page. This typically takes less than 5 minutes.\nHit the publish button and your site or app will be updated immediately, without a deploy.\nAny time you need to make changes, just make the update in Builder and hit publish again. You can control who can update what with roles and permissions.\n\nView the integration docs to learn more about integrating Builder.io's APIs\n\nWhat's next\n\nCertain parts of the Visual Copilot workflow use AI, for more information, visit How Builder Uses AI.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nImport your Figma designs\nGenerate code from your content entries\nSync generated code to your codebase\nPublish designs to your site or app via API\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Start Building - Builder.io",
    "url": "https://www.builder.io/c/docs/start-building",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nLET'S BUILD TOGETHER\n\nPopular Tutorials\n\nThe documentation within Building Content features the Builder Visual Editor, an intuitive drag-and-drop editor where you can quickly build Pages, Sections, and leverage your data.\n\nFEATURED GUIDES\n\nMake a Landing Page\n\nBecome a Responsive Design Pro\n\nBuilder for Shopify\n\nLearn about Blocks\n\nTour the Visual Editor\n\nReuse Blocks to Work Smarter\n\nPOPULAR VIDEO TUTORIALS\n\nThe following collection of how-to videos walks you step-by-step through some of our customers' most requested project types.\n\nCreating a Page\n\nMake a basic page in under a minute. Perfect if you are new to Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: < 1 minute\n\nMaking a Hero Block\n\nCreate a full-width image that features a button and copy.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 3 minutes\n\nBatch Uploading Images\n\nUpload multiple pictures at a time into Builder.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 1 minute\n\nMaking a Multi-column Section\n\nCreate a section with multiple images in columns that sit side-by-side at larger screen widths and stack on smaller screens.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 2 minutes\n\nCreating a Full-width Two Column Section\n\nCreate a section that spans the whole viewport with a pull quote on one side and an image on the other.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 4 minutes\n\nMaking an Announcement Bar\n\nCreate a bar that spans the whole viewport with an announcement.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 1.5 minutes\n\nMaking a Full-Width Carousel\n\nCreate a section with multiple images that you can scroll through horizontally.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 2.5 minutes\n\nMaking a Footer\n\nCreate a footer that spans the viewport, contains a logo, and columns of links. These guidelines meet most use cases.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 10 minutes\n\nMaking a Footer Symbol\n\nCreate a footer Symbol with customizable inputs. If youʻre new to Symbols, be sure to check out Reusing Blocks first.\n\nSkill set: Advanced\n\nArea: UI only\n\nLength: 5 minutes\n\nCreating a Section with a Changeable Background\n\nMake a section with a background that changes when you hover over certain configured areas. Includes:\n\ninteractive example, also known as a fiddle\na preview so you can see the end result\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 17.5 minutes\n\nMaking a Grid Layout\n\nCreate a responsive grid layout with techniques that you can adapt to different designs.\n\nSkill set: Intermediate\n\nArea: UI only\n\nLength: 10 minutes\n\nMixing Content from Different Models\n\nLearn how to embed a section that displays data model content inside of a Next.js page. Includes:\n\nOverview of the video's contents\nNext.js and Shopify starter with Shopify plugin setup instructions\nCode for this tutorial\nLive demo\n\nSkill set: Familiar with code\n\nArea: UI and code\n\nLength: 33 minutes\n\nBuilding a Page with Templates\n\nUsing a pre-built Template, you can create your first Builder page quickly. Follow this tutorial to create your page in four steps. Then, have fun customizing your page.\n\nSkill set: Basic\n\nArea: UI only\n\nVideo coming soon\n\nGet Up and Running with the Visual Editor\n\nLearn your way around the Visual Editor by creating a page, using blocks, and styling your creation in this in-depth half-hour tutorial.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 29 minutes\n\nCreating a Site Theme\n\nChange site colors instantly with Data models that feature color pickers. Teammates can iterate on color palettes and make as many as they need.\n\nSkill set: Intermediate\n\nArea: UI only\n\nLength: 3 minutes\n\nSetting up Server-side Redirects with Next.js\n\nUse a Builder Data model with your Next.js app to redirect site traffic from one URL to another.\n\nSkill set: Familiar with code\n\nArea: UI and code\n\nLength: 2 mins\n\nSetting up and Using Product Data\n\nUse a Builder Data model to create Product Data and use that Data in the Visual Editor with data binding.\n\nSkill set: Intermediate\n\nArea: UI\n\nLength: 4 mins\n\nMaking a Landing Page (series)\n\nFollow this six-step tutorial to make a responsive landing page.\n\nSkill set: Basic\n\nArea: UI\n\nLength: Six 5-minute videos\n\nCreating a Countdown Timer Hero\n\nUse a built-in Builder template or custom code to create a countdown hero.\n\nSkill set: Basic OR familiar with code\n\nArea: UI or code\n\nLength: 21 sec for built-in template.\n\nHow to Build Webinar Series\n\nDive into some of Builder's most in-demand features with our on-staff experts.\n\nSkill set: All\n\nArea: All\n\nLength: Varies by webinar\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/developers?_host=www.builder.io",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nLET'S BUILD TOGETHER\n\nDeveloping with Builder\n\nGet building with Builder's Visual Headless CMS!\n\nAutomatic Integration with Devtools\n\nINTEGRATE WITH YOUR CODE\n\nIntegrate Page Building\n\nIntegrate Section Building\n\nIntegrate Structured Data\n\nWhich should I use?\nBuilder Blueprints\n\nBlueprints are quick references for common use cases with Builder.\n\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\n\nYour experience is so important. Let us know what you think.\n\nGive Blueprint Feedback\n\nDIVE DEEPER\n\nIntegrate Custom Components\n\nLearn About Content Models\n\nExtend Builder with Plugins\n\nEXPLORE THE BUILDER PLAYGROUND:\n\nExplore a Builder Integration in Your Browser\n\nPOPULAR DEVELOPER DOCS\n\nHow Builder Works: Technical Overview\n\nAPI Documentation\n\nGenerating Code with Visual Copilot\n\nIntegrate Symbols\n\nWe ❤️ open source\n\nBuilder\n\nBuilder SDKs, plugins, examples, and more\n\nQwik\n\nResumable framework for building instant-on web apps with great time-to-interactive\n\nMitosis\n\nUniversal components compiler. Write components once, run everywhere.\n\nPartytown\n\nRelocate resource intensive 3rd - party scripts off the main thread and into a web worker.\n\nFigma / HTML\n\nConvert Figma designs to HTML, CSS, React, Vue and more!\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Getting started with the visual editor in Builder.io - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/page-building",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nPopular Tutorials\n\n>\n\nGet Up and Running in the Visual Editor\nGet Up and Running in the Visual Editor\n\nThis video walks through all the features of the Visual Editor and demonstrates how to perform common tasks.\n\nSkill set: Basic\n\nArea: UI only\n\nLength: 29 minutes\n\nPrerequisites\nYouʻll need a Builder account.\nAn evergreen browser; that is, a modern, up-to-date browser such as Google Chrome.\n\nCreate a page\n\nColumns\n\nImage Sizing\n\nInsert tab\n\nOptions tab\n\nStyle tab\n\nStyling\n\nAlignment\n\nMargin & Padding\n\nLayers tab\n\nCopy & paste\n\nX-Ray Mode\n\nBox block\n\nCustom CSS properties\n\nCopy & paste style\n\nMulti selection\n\nGrouping\n\nDuplicate layers\n\nResponsive Mobile Styling\n\nChild layout options\n\nHiding layers per device\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/api-intro",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nAPI Intro\nAdmin API\nBuilderComponent\nContent Component\nContent API\nContent API Versions\nQuerying Cheatsheet\nGraphQL API\nHTML API\nImage API\nQwik API\nUpload API\nWrite API\nWebhooks\nWeb Components API\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nBuilder API Documentation\n\nBuilder's APIs offer a wide variety of ways to leverage content and data quickly and efficiently.\n\nAdmin API\n\nA GraphQL API for back-end servers or trusted partners.\n\nContent API\n\nMake requests to retrieve data about any of your Builder models.\n\nGraphQL API\n\nQuery your data by targeting attributes and custom fields.\n\nHTML API\n\nUse Builder to pre-render your components server-side.\n\nImage API\n\nAccess and download optimized versions of your uploaded images.\n\nQwik API\n\nBuilder's ultra performance optimized alternative to the HTML API.\n\nUpload API\n\nUpload files, such as images and videos, programmatically.\n\nWrite API\n\nCreate, delete, and update content in Builder.\n\nWebhooks\n\nListen for content changes that should trigger workflows.\n\nWeb components API\n\nDisplay dynamic Builder content on any tech stack.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Intro to Plugins - Builder.io",
    "url": "https://www.builder.io/c/docs/plugins-intro?_host=www.builder.io",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nIntro\nBuilt-in Plugins\nMaking Your Own Plugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntro to Plugins\n\nPlugins for Builder help you integrate a third-party service and customize nearly every part of Builder's Visual Editor and models.\n\nPlugins are a powerful tool for customizing the Visual Editor to make it easier for users to manage and create content.\n\nPlugins help you:\n\nCreate custom types.\nExtend the Visual Editor's user interface.\nTypes of Plugins\n\nThere are three types of plugins in Builder:\n\nBuilt-in plugins: On the Integrations page in Builder, use these ready-made plugins to help you integrate with e-commerce platforms and external data providers with minimal configuration. All plans can use the built-in plugins.\nPublic plugins: You code these and then submit a PR to add to the built-in integrations. Public plugins become part of the Builder ecosystem and when they're merged, Builder.io's engineers help maintain them. All plans can submit public plugins.\nPrivate plugins: You code these but they do not become part of the Builder ecosystem because you maintain them privately. Private plugins are available on all Enterprise plans while plugins with your own branding are available as an add-on for Enterprise customers.\n\nThe diagram below shows these points in a table form:\n\nUse cases for plugins\nBuilt-in Plugins\n\nUse built-in plugins for integrating your Builder account space with with e-commerce platforms and external data providers.\n\nBuilt-in plugins include everything in Integrations, such as:\n\nBigCommerce\nCommercetools\nCommerce.js\nFigma\nPartytown + Shopify\nSmartling\n\nFor a full list, see Integrations and for further documentation, refer to Overview of Built-in Plugins.\n\nPublic Plugins\n\nUse public plugins when you want to customize the Builder Visual Editor UI and you are willing to share your plugin with others. Common use cases for public plugins are:\n\nAdding your own custom types for a model, such as a rich text editor\nCustomizing the Builder Visual Editor\nTargeting content based on what users have in their cart\nCustomizing Symbol inputs\nCreating an action plugin to trigger events in Google Analytics\nAdding an image management plugin\nIntegrating with Shopify\n\nFor more details and instructions on creating plugins, see Extending the Builder UI with Plugins and Making a Plugin.\n\nPrivate Plugins\n\nCreate private plugins when you have needs specific to your company that you need to keep accessible only within your organization. Examples include:\n\nCustomizing the look and feel of Builder with your own branding\nAdding custom flows for creating e-mail campaigns\nNext Steps\n\nUsing and creating plugins opens up countless possibilities. For more info on plugins, check out the following documents:\n\nOverview of Built-in Plugins—an introduction to the plugins already available in Builder.\nMaking a Plugin—a tutorial on how to create your own plugin.\nBuilder.io plugin examples on GitHub\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nTypes of Plugins\nUse cases for plugins\nBuilt-in Plugins\nPublic Plugins\nPrivate Plugins\nNext Steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Intro to Integrating Custom Components - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-components-intro",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nIntro\nRegistering Components\nIn the Visual Editor\nChild Blocks in Components\nOverriding Components\nComponents-only Mode\nInput Types\nVersioning\nregisterComponent()\nSSR & SSG\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntegrating Custom Components\n\nYou can expand on Builder's selection of built-in blocks by registering components from your codebase with Builder. Then, teammates can drag and drop your components within Builder's Visual Editor just like any other block.\n\nYou can use components you code yourself or third-party components with Builder.\n\nGet Started\n\nUsing your custom components in Builder's Visual Editor is a minimal process:\n\nStep 1: Register Custom Components with Builder, which requires minimal code setup.\nLearn to register your components\nStep 2: Use your component in the Visual Editor by dragging and dropping your component like any other block and customizing it in the Visual Editor.\nUse cases for integrating custom components\n\nCustom components are ideal when you want to accomplish goals such as:\n\nAdding unique functionality to your site for special use cases\nSystematizing design and content patterns\nStandardizing your design system with custom components-only mode, which makes only your custom components available for use in the Visual Editor\nCustomizing blocks\nOverriding built-in blocks\nFurthering your customized experience\n\nAfter you've set up custom components in Builder you can customize your team's experience even further by:\n\nUsing Builder Blocks in Custom Components\nOverriding Built-in Components\nVersioning Custom Components\n\nNext steps\n\nTo get started using your custom components in Builder, head over to Registering Custom Components with Builder.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nGet Started\nUse cases for integrating custom components\nFurthering your customized experience\nNext steps\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Intro to Models - Builder.io",
    "url": "https://www.builder.io/c/docs/models-intro",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nModels Intro\nArchitecture Best Practices\nPage Models\nSection Models\nData Models\nPreviewing a Data Model\nData Models & A/B Testing\nPrivate Models\nCustom Fields\nValidation Hooks\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntro to Models\n\nA model is a paradigm—a pattern for something else. Builder offers three kinds of models that define content types:\n\nA Page model: The basis for a full Page built in Builder\nA Section model: The basis for a part of a Page.\nA Data model: Gives structure to a collection of data that you render as you choose.\n\nYou use these models as the defining source for content entries. Like a rubber stamp, the model provides a basic foundation. Each time you use a rubber stamp, the fundamental characteristics are the same but you might use the resulting image differently by varying other factors such as color and surface.\n\nSimilarly, with models in Builder you can define what a Page, Section, or collection of Data is and use those models over and over to build your site and populate it with content. And you can create as many models as you like.\n\nThe following graphic compares Builder models. Follow the Try it out link to play with a demo of each.\n\nVisual Pages\n\nTry out Pages\n\nUse Pages to manage entire pages, such as:\n\nMarketing and content pages\nLanding pages\n\nVisual Sections\n\nTry out Sections\n\nUse Sections to maintain parts of your site or app, such as:\n\nAnnouncement bars\nProduct editorial\nCollection heroes\nCart upsells\n\nStructured Data\n\nTry out Data\n\nUse Structured Data to manage structured data, such as:\n\nNavigation links\nProduct details\nBlog post authors\n\nAll models in Builder support:\n\nA/B Testing: Test different versions of your content.\nTargeting: Deliver specific content to the right people.\nScheduling: Publish your content at the right time.\nRoles and Permissions in a Space: Admins and Developers can edit models by default, but you can also specify permissions by content model using Custom Roles.\n\nThis means that you can granularly grant permissions, test, and precisely deliver content.\n\nExplore common integration patterns:\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\nUsing models to build your app\nWhat's next\n\nTo get the most out of Builder Models, be sure to integrate and learn about each type of model:\n\nPage Model: Learn what a Page model is and how to use one.\nIntegrating Pages: Integrate Page building with your code base so non-dev team members can create as many pages as they need and developers can focus on code.\nSection Models: Learn about Section use cases and how to use Sections in your app.\nIntegrating Sections: Integrate Builder Sections with your codebase so teammates can create and use Sections wherever they need them.\nData Models: Give shape to data and learn how to query that data.\nIntegrating CMS Data: Integrate data to create reusable data across your site.\nCustom Fields: Learn about the wide array of options available for shaping your models.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nExplore common integration patterns:\nUsing models to build your app\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder for Enterprise - Builder.io",
    "url": "https://www.builder.io/c/docs/enterprise-hub",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nBuilder for Enterprise\n\nOn an Enterprise plan, you have access to top-notch Builder features and services. And with add-ons only available to Enterprise customers, you can leverage Builder to deeply refine experiences for your customers.\n\nGUIDES FOR ENTERPRISE FEATURES\n\nEnterprise customers have access to an array of features, which include:\n\nPremium Support SLA\n\nGuaranteed 99.9% uptime and support response times\n\nCustom Roles and Permissions\n\nGranularly determine user access and permissions\n\nEnvironments\n\nCreate environments such as QA and Prod\n\nWorkflows and Rules\n\nImprove collaboration and quality\n\nSINGLE-SIGN ON\n\nSSO with Okta\n\nConnect Okta to Builder for Single Sign-On\n\nSSO with Google Workspace\n\nConnect Google Workspace to Builder for Single Sign-On\n\nSSO with Azure\n\nConnect Azure to Builder for Single Sign-On\n\nPOWER FEATURES\n\nUsing Templates Across Spaces\n\nShare templates in all of your Spaces\n\nRequest to Publish\n\nUsers can request that content go live\n\nSmart Targeting\n\nCurate your targeting attributes\n\nWhite-labeling\n\nThoroughly customize Builder\n\nCreate a Private Plugin\n\nMeet your specific use cases with private plugins\n\nUsing Custom Dashboards\n\nAccess customized key performance insights\n\nCopy an Entire Space\n\nDuplicate a whole Space in your Organization\n\nView Organization Insights\n\nList most active users by Space\n\nCustomize Dashboards Programmatically\n\nUse your own SQL queries for displaying metrics\n\nEmbedded Apps\n\nDeeply customize the Builder user interface\n\nContributor Role\n\nGive users limited access to update content\n\nSome of these features are add-ons. If you would like to learn more about Builder's add-on Enterprise features, contact your Account Executive, email sales@builder.io, or reach out to us through our contact form.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Resources for integrations - Builder.io",
    "url": "https://www.builder.io/c/docs/integrating-resources",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nResources for Integrating Frameworks\n\nThis page is a collection of helpful links to extra resources on integrating a number of frameworks with Builder.\n\nFor a complete list of Builder framework examples, see the examples directory on the Builder GitHub repo.\n\nThe GitHub logo indicates that the resource is available on GitHub. Otherwise, the resource is a Builder blog post or document.\n\nAngular\n\nGatsby\n\niOS and Android\n\nMaterial UI\n\nNext.js step-by-step blog post\n\nNext.js examples\n\nNode.js and Express\n\nReact Native\n\nReact API Reference\n\nReact: Triggering Custom Actions\n\nReact Code Example: multiple pages\n\nReact Code Example: multi-page funnel\n\nReact Code Example: design system\n\nRuby on Rails\n\nSalesforce\n\nShopify Hydrogen\n\nStorybook\n\nSvelte (Sveltekit)\n\nVanilla JS\n\nVue 2 (Nuxt 2)\n\nVue 2 (Vue Storefront)\n\nVue 3\n\nWordpress\n\nOther frameworks\n\nBuilder is API-first and designed to work alongside other APIs, including proprietary frameworks. Depending on your use case, you can also consider using Builder's Write API or Making Your Own Plugin.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nOther frameworks\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using Enrich to Fetch References and Symbols - Builder.io",
    "url": "https://www.builder.io/c/docs/enrich",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nFetching References and Symbols with enrich\n\nTo fetch or load references or Symbols, you must use enrich in your calls to fetch multiple entries from Builder.\n\nPass in the options object with enrich: true when using getAll() in a Gen 1 SDK and fetchEntries() in a Gen 2 SDK. This provides a consistent experience between the Visual Editor and the live site.\n\nTip: Builder enriches by default for Gen 1's builder.get() and Gen 2's fetchOneEntry().\n\nGen1: fetching references and Symbols with enrich\n\nTo fetch or load references or Symbols, be sure to manually pass in enrich: true when using getAll().\n\nimport { builder } from '@builder.io/react';\n\nconst pages = await builder.getAll('page', {\n  // to fetch references and Symbols\n  options: { enrich: true }\n});\n\nGen2: fetching references and Symbols with enrich\n\nTo fetch or load references or Symbols, be sure to manually pass in enrich: true when using fetchEntries().\n\nimport { fetchEntries } from '@builder.io/sdk-react';\n\nconst pages = await fetchEntries({\n  model: 'page',\n  apiKey: 'YOUR_API_KEY',\n  // to fetch references and Symbols\n  options: { enrich: true }\n});\n\n\nWhat's next\n\nFor more detail on the Gen 2 (or Mitosis) SDKs, see the Builder GitHub repo.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nGen1: fetching references and Symbols with enrich\nGen2: fetching references and Symbols with enrich\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using Widgets - Builder.io",
    "url": "https://www.builder.io/c/docs/widgets",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing Widgets\n\nBuilder widgets streamline the development process so you can focus on creating engaging user interfaces.\n\nWith these widgets, you can create interactive elements such as collapsible sections, image sliders, and tabbed content, enhancing the appeal and functionality of your content.\n\nTip: Widgets work only with the Gen 1 React SDK. For more detail on the Builder SDKs, read The Builder SDKs.\n\nPrerequisites\n\nTo get the most out of this document, you should already have the following:\n\nAn app already Integrated with Builder\nInstalling widgets\n\nIn your project, install the Builder Widgets package by running the following npm install in the terminal:\n\nnpm install @builder.io/widgets\n\nIn your React application, import the Builder Widgets package to register the widgets:\n\nimport '@builder.io/widgets';\n\nInclude this import statement wherever you render a <BuilderComponent /> in your code. This registers the widgets and makes them available for use in the Visual Editor, as well as ensures proper rendering during both client-side and server-side rendering.\n\nUpdating widgets\n\nIf you're already using widgets, you can keep them up-to-date with:\n\nnpm install @builder.io/widgets@latest\n\nOr, if you're using yarn:\n\nyarn add @builder.io/widgets@latest\nLazy loading widgets\n\nTo improve performance, you can lazy load the Builder widgets package by asynchronously importing only the widgets used in Builder content. This means that widgets only load when needed, which helps you streamline user experience (UX) and more efficiently use resources.\n\nIn Next.js\n\nInstead of importing the root package synchronously, use the following import statement in Next.js:\n\nimport '@builder.io/widgets/dist/lib/builder-widgets-async';\n\nThis enables lazy loading of the widgets, which ensures they are loaded only as needed.\n\nIn other frameworks\n\nFor other frameworks, explicitly lazy load the widget components by registering them with your chosen lazy loading library.\n\nThe following example uses Loadable, the React code-splitting library:\n\nimport { Builder } from '@builder.io/react';\nimport { accordionConfig } from '@builder.io/widgets/dist/lib/components/Accordion.config';\nimport loadable from '@loadable/component';\n\nBuilder.registerComponent(\n  loadable(() =>\n    import('@builder.io/widgets/dist/lib/components/Accordion').then(mod => mod.AccordionComponent)\n  ),\n  accordionConfig\n);\n\n\nIn this example, the Accordion component from the Builder Widgets package is registered using Loadable's lazy loading functionality. The component is loaded only when it's used in your content.\n\nIf your framework supports Suspense, you can use this technique in a similar manner as Loadable to lazy load the Builder Widgets components when needed.\n\nUsing widgets\n\nAfter installing widgets, find them in the Layouts section of the Insert tab.\n\nTip: The Layouts section only displays if you've installed and imported the Widgets package or are using the Fallback Editor or fiddle.\n\nAccordion\n\nThe Accordion component renders an accordion-style UI. It accepts an array of items, each consisting of a title and a detail section. Users can click on the title to expand and collapse the corresponding detail section.\n\nThe component supports options such as displaying as a grid, allowing only one item to be open at a time, and customizing the layout.\n\nTo use the Accordion:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Accordion widget.\nClick Edit to adjust settings.\n\nThe following video shows dragging in an Accordion widget, editing some of the settings in the Accordion's Edit dialogue. Just as with other blocks, you can apply styles to get the look and feel you want in your Accordion.\n\nCarousel\n\nThe Carousel component renders interactive carousels or sliders using the react-slick library. It accepts an array of slides and supports options like autoplay, navigation buttons, responsive settings, and customization of slide content and styles.\n\nThis component can render static content as well as dynamic content. With its customizable settings and seamless integration, the Carousel component provides an intuitive way to showcase and navigate through a collection of content.\n\nTo use the Carousel:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Carousel widget.\nClick Edit to adjust settings.\n\nThe following video shows dragging a Carousel widget, editing some of the settings in the Carousel's Edit dialogue, and clicking through the slides. Just as with other blocks, you can apply styles to get the look and feel you want in your Carousel.\n\nTabs\n\nTabs provide a convenient way to organize and present multiple sections of content within a limited space. It accepts an array of tabs, each consisting of a label and corresponding content. Users can switch between tabs by clicking on the labels, and the active tab's content is displayed.\n\nTo use the Tabs component:\n\nInstall the Widgets package.\nGo to the Insert tab > Layouts.\nDrag in the Tabs widget.\nClick Edit to adjust settings.\n\nThe component offers additional features like setting a default active tab, collapsible tabs to toggle their visibility, customizable tab header layout options, and the ability to style the active tab to distinguish it from others.\n\nThe following video shows dragging in the Tabs widget and editing its settings:\n\nWhat's next\n\nFor more detail on the available widgets, check out the code on GitHub.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nInstalling widgets\nUpdating widgets\nLazy loading widgets\nIn Next.js\nIn other frameworks\nUsing widgets\nAccordion\nCarousel\nTabs\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "SDK Comparison - Builder.io",
    "url": "https://www.builder.io/c/docs/sdk-comparison",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nSDK Comparison\n\nIf you want to use the latest, second-generation Builder SDKs, understanding how the imports might have changed for your framework can help you get started smoothly so you can leverage the many improvements and updates.\n\nTip: Currently, the React Gen 2 SDK is in beta. We recommend that you use the Gen 1 SDK for React and React-based frameworks.\n\nTable of features supported\n\nThe table below outlines the features available for our SDKs.\n\nFeature\tReact (Gen1)\tReact (Gen2)\tVue\tReact Native\tSvelte\tQwik\tAngular\tHTML API\n\nSSR/SSG\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\nn/a\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n⚠️\n\t\n\n✅\n\n\n\n\nCustom Components\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n⚠️\n\t\n\n❌\n\n\n\n\nChildren for Custom Components\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n❌\n\n\t\n\n❌\n\n\n\n\nCustom Fonts\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\nn/a\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\n\n\nAnimations\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n🏗️\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\n\n\nCustom data/context\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n❌\n\n\t\n\n❌\n\n\n\n\nBuilder's global state\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n⚠️\n\t\n⚠️\n\n\n\nWidgets\n\n\t\n\n✅\n\n\t\n\n🏗️\n\n\t\n\n🏗️\n\n\t\n\n🏗️\n\n\t\n\n🏗️\n\n\t\n\n🏗️\n\n\t\n\n✅\n\n\t\n\n✅\n\n\n\n\nCSS Nesting (& operator)\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\nn/a\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\n\n\nLocales\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n\n✅\n\n\t\n⚠️\n\t\n⚠️\n\nLegend\n\n✅ = Full support\n\n🏗️ = Being developed\n\n⚠️ = Partial support (hover for a tooltip with details)\n\n❌ = Not supported\n\nRendering content\n\nRendering your Builder content differs between Gen 1 and Gen 2.\n\nGen 1\n\nIn Gen 1 SDKs the component is BuilderComponent.\n\nimport { BuilderComponent } from '@builder.io/react';\n\n<BuilderComponent model=\"page\" content={contentJSON} />\n\nFor recommended usage and a description of the props and methods of BuilderComponent, visit Using BuilderComponent.\n\nGen 2\n\nIn Gen 2 SDKs the component is Content.\n\nimport { content } from '@builder.io/sdk-react';\n\n<Content \n  model=\"page\" \n  apiKey=YOUR_API_KEY\n  content={contentJson}\n />\n\n\nFor recommended usage and a description of the props of the Content component, visit Using the Content Component.\n\nFetching data\n\nFetching data differs between Gen 1 and Gen 2.\n\nGen 1\n\nIn Gen 1, import builder and use the get() or getAll() helper:\n\nimport { builder } from '@builder.io/react';\n\nconst page = await builder.get('page', {\n  fields: 'data.url, name',\n});\n\nconst pages = await builder.getAll('page', {\n  fields: 'data.url,name',\n});\n\n\n\nGen 2\n\nIn Gen 2, import fetchOneEntry() and fetchEntries() to fetch single and multiple entries respectively. Additionally, note that the apiKey is a required field:\n\nimport { fetchOneEntry, fetchEntries } from '@builder.io/sdk-react';\n\nconst page = await fetchOneEntry({\n  model: 'page',\n  fields: 'data.url,name',\n  apiKey: 'YOUR_API_KEY'\n});\n\nconst pages = await fetchEntries({\n  model: 'page',\n  fields: 'data.url,name',\n  apiKey: 'YOUR_API_KEY',});\n\n\n\nFor more information, visit the Content API documentation.\n\nRegistering custom components\n\nRegistering custom components differs between Gen 1 and Gen 2.\n\nGen 1\n\nIn Gen 1, import the Builder object and use registerComponent():\n\nimport { Builder } from '@builder.io/react';\nimport { MyHero } from './MyHero';\n\nBuilder.registerComponent(MyHero, {\n  name: 'Hero',\n  inputs: [\n   { name: 'title', type: 'string' },\n  ],\n});\n\n\n\nGen 2\n\nIn Gen 2, create a customComponents array containing all the custom components, and pass that as a prop to the Content component:\n\nimport { Content } from '@builder.io/sdk-react';\nimport { MyHero } from './MyHero';\n\n// this array can contain as many custom components as you want\nconst customComponents = [\n  {\n    component: MyHero,\n    name: 'Hero',\n    inputs: [\n      { name: 'title', type: 'string' },\n    ],\n  }\n]\n\n// pass the array to Content\n<Content customComponents={customComponents} />\n\n\n\nFor more information on custom components, visit Registering Custom Components.\n\nConfiguring the Visual Editor\n\nConfiguring the Visual Editor differs between React Gen 1 and React Gen 2.\n\nGen 1\n\nIn Gen 1, import Builder and use the register() helper:\n\nimport { Builder } from '@builder.io/react';\n\nBuilder.register('insertMenu', {\n  name: 'Our components',\n  items: [\n    { name: 'Hero' },\n    { name: 'Double Columns' },\n    { name: 'Triple Columns' },\n    { name: 'Dynamic Columns' },\n  ],\n})\n\n\nGen 2\n\nIn Gen 2, import register:\n\nimport { register } from '@builder.io/sdk-react';\n\nregister('insertMenu', {\n  name: 'Our components',\n  items: [\n    { name: 'Hero' },\n    { name: 'Double Columns' }\n  ],\n})\n\nFramework\tGen 1\tGen 2\n\nQwik\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-qwik\n\n\n\n\nReact*\n\n\t\n\nstable\n\n@builder.io/react\n\n\t\n\nin beta\n\n@builder.io/sdk-react\n\n\n\n\nNext.js\n\n\t\n\nstable\n\n@builder.io/react\n\n\t\n\nin beta\n\n@builder.io/sdk-react-nextjs\n\n\n\n\nVue**\n\n\t\n\nstable\n\n@builder.io/vue\n\n\t\n\nin beta\n\n@builder.io/sdk-vue\n\nThough Vue Gen 2 is in beta, this is the recommended SDK.\n\n\n\n\nSvelte\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-svelte\n\n\n\n\nSolid\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-solid\n\n\n\n\nReact Native\n\n\t\n\nn/a\n\n\t\n\nin beta\n\n@builder.io/sdk-react-native\n\n\n\n\nAngular\n\n\t\n\nstable\n\n@builder.io/angular\n\n\t\n\nn/a\n\nWhat's next\n\nFor fetching in advanced use cases, read Using Enrich to Fetch References and Symbols.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Scripting the Visual Editor - Builder.io",
    "url": "https://www.builder.io/c/docs/scripting-the-editor",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nScripting the Visual Editor\n\nYou can leverage your browser's console with JavaScript to manipulate elements in a Builder content entry.\n\nOpen a Builder content entry in the Visual Editor.\nOpen your browser's JavaScript console.\nIn the console, use the global builder to interact with the elements in the current entry as in the following video example:\n\nThe example in the video above removes the top margin from the elements on the Page and is as follows:\n\nbuilder.allEditingElements.forEach(el => {\n  if (el.style.get('marginTop') === '20px') {\n    el.style.delete('marginTop')\n  }\n})\n\nWhat's next\n\nIf you'd prefer to use the UI, rather than the browser console, visit Intro to Plugins where you can find information on what plugins are and how to use them.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Generating code from your Builder content entries - Builder.io",
    "url": "https://www.builder.io/c/docs/generate-code",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nGenerating Code with Visual Copilot\n\nin beta\n\nWhen generating code with Builder, you can generate code for any content entry.\n\nPrerequisites\n\nBefore generating code in Builder, make sure:\n\nYou have a Builder Page or Section with content\nOverview\n\nWhen generating code, you specify your framework, styling, and select Fast or Quality for code output type.\n\nThe image below gives an overview of where to select the main settings. The rest of this document goes into the available options in detail.\n\nSupported frameworks include:\n\nReact\nReact Native\nQwik\nVue\nAngular\nHTML\nSolid.js\nSvelte\n\nFor CSS, you can choose:\n\nTailwind\nCSS\nEmotion (React)\nStyled Components (React)\nStyled JSX (React)\n\nBuilder-generated styles include clean, contextual class names, CSS variable names that align to your design system, and styled components with contextual names.\n\nCode quality\nThere are two types of generated code available, Fast code generation and Quality code generation.\nFast code generations\n\nFast code generations leverage Builder’s proprietary AI model and open-source compiler to nearly instantly turn any Figma design file into high-performing, responsive code for any framework.\n\nFree for all plans, Builder generates Fast code for the selected layers immediately, which is nearly instantly available. This code is best for rapid prototyping and working out quick concepts.\n\nQuality code generations\n\nQuality code generations further enhance fast code generations to support your framework and styling requirements by adding an additional AI model that has been fine-tuned to generate clean, semantic code just as developers would write themselves.\n\nQuality code generates at a more deliberate speed as AI considers the design as a whole and thoughtfully creates corresponding code.This bespoke option is more specific to your needs in that you can tell Builder's AI precisely what you want with custom instructions and prompts.\n\nFor more detail on using Quality code, read Prompting AI for customization.\n\nGenerating code for your Builder entry\n\nTo generate the code from your content entry:\n\nOpen the Page or Section in the Visual Editor.\nFor the whole content entry, make sure nothing's selected. For just a portion of the entry, select what you'd like code for.\nIn the Visual Editor, click on the Get code icon, < >, in the upper right.\nIn the code pane that opens, select your Framework and Styling.\n\nThe video below shows this process:\n\nAfter generating the code, you can do one of the following to get your code into your codebase:\n\nCopy the code by clicking on the copy icon and paste it manually into your project.\nSync the code automatically, which the next section covers.\nSyncing the code automatically with your codebase\n\nTo automatically sync the generated code with your local project, it helps to have Devtools installed and the dev server running.\n\nTo install Devtools and start the dev server, if needed:\n\nExpand the Sync code section on the right.\nClick the Sync to Your Codebase button.\nCopy the npm command and run it in the terminal at the root of your project.\nStart the dev server.\n\nIf Devtools is installed and the dev server is running:\n\nWhen the dev server is running and detected*, the Sync to Your Codebase button turns blue. Now, when you click it, you'll receive a prompt for the location where you'd like to sync your code.\nEnter the path and file name or accept the default suggestion.\nClick Sync.\n\n*Detecting the dev server should only take about 2 seconds at a maximum.\n\nThe following video shows the entire process:\n\nFor more information on Devtools, visit Using Builder Devtools for Automated Integration.\n\nSyncing the code from the command line\n\nAs an alternative to using Devtools, you can run the generated npx command at the command line; for example, npx builder.io add ####, where #### is a hash that identifies the generated code.\n\nThe next video shows running this command and opening the synced code.\n\nPrompting AI for customization\n\nTo further customize your generated code with AI:\n\nBe sure you've selected Quality for the type of code.\nAt the bottom of the screen, select a suggestion or type in your own request.\n\nAs an example, the following video shows this process to break the content into separate components by selecting the multiple components suggestion:\n\nThe following image and example code show how AI worked to break the code up into separate components in the previous video:\n\nExpand for example code excerpts:\n\nCustomizableHeroLayout()\n\nHeroSection()\n\nFeatureSection()\n\nSuggested prompts for code generation include the following list. By selecting any of them, Builder regenerates the code while incorporating these features:\n\nUse Next.js Image: adds Next.js Image to your code.\nMake interactive: adds interactivity such as code that supports click events.\nBreak into multiple components: refactors code into separate components.\nUse props: adds props, making your code easier to maintain and use.\nUse MUI: uses the Material UI design system.\n\nFor other features, type your request into the input and press Enter.\n\nAdding persistent custom instructions\n\nIn addition to using the default prompts, you can give Builder your own instructions so that any time you generate code Builder will create it to your specifications.\n\nSaved custom instructions persist through logging out and apply across your Organization and Space per user. That means that if you add custom instructions, they only apply to your account, whereas a teammate's custom instructions would only apply to their own account.\n\nTo add your own custom instructions:\n\nIn the Generated Code panel, click the Settings wheel on the bottom left, next to the input.\nList your instructions by typing them in. You may also click on the suggestions to add them.\nWhen you're done, click the Save button.\n\nThe next video shows adding custom instructions:\n\nEditing or removing custom instructions\n\nTo remove or edit your custom instructions:\n\nClick the Get Code icon to open the Generated Code panel.\nIn the Generated Code panel, click the Settings wheel on the bottom left, next to the input.\nEdit or remove your instructions.\nWhen you're done, click the Save button.\n\nThe next video shows editing custom instructions:\n\nWhat's next\n\nIn addition to the process outlined above, you can fully integrate Pages, Sections, and Data and take advantage of Builder's features. Visit Integrating Pages for more information.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nOverview\nCode quality\nFast code generations\nQuality code generations\nGenerating code for your Builder entry\nSyncing the code automatically with your codebase\nSyncing the code from the command line\nPrompting AI for customization\nAdding persistent custom instructions\nEditing or removing custom instructions\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Custom Code in the Visual Editor - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/custom-code",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nCustom Code in the Visual Editor\n\nThe Builder Visual Editor helps you add event handlers, bind to state, and even add custom JavaScript that runs on your page.\n\nTip: To add custom HTML to your Page or Section, use the Custom Code Block rather than custom JavaScript.\n\nManaging state and actions\n\nIn Builder, you can bind state values to Builder blocks and implement custom actions when users interact with your content.\n\nFor detailed instructions on incorporating state bindings or action handlers, visit Building Interactivity Using State and Actions.\n\nWhen adding custom JavaScript code within a state binding or action handler, remember that you needn't use the return keyword to yield a value. Instead, choose from these four examples:\n\nData binding: one-line expressions\n\nFor straightforward, one-line expressions, you can write code directly in the code editor without the return statement:\n\nstate.showWelcomeMessage ? 'Say Hello' : 'Say Goodbye'\nData Binding: complex code blocks\n\nFor more intricate logic, export a default value:\n\nlet greeting;\nif (justLoggedIn) {\n  value = 'Welcome';\n} else {\n  value = 'hi';\n}\nexport default greeting;\nAccessing state\n\nYou can access Builder state in both state bindings and action handlers. While state bindings are typically closely bound to Builder, you can also modify the state value within the binding. For example:\n\n// use the plain value from state\nstate.someStringValue\n\n// uppercase the state value\nstate.someStringValue.toUpperCase()\n\n// return a different value depending on state property\nstate.someBooleanValue ? 'yes' : 'no\nAction handlers: using the Event object\n\nAction handlers introduce an additional object you can access: event.\n\nThis event object represents the HTML event triggered by the selected action. You can leverage event to access the event's target element or invoke methods such as preventDefault or stopPropagation:\n\n// access the value attribute (ie from an input)\n// and store it in builder state\nstate.someStateProp = event.currentTarget.value;\n\n// if you have a link with an href, you might want to stop\n// default browser navigation and handle this yourself\nevent.preventDefault();\nvar targetElementId = event.currentTarget.id;\nvar elementToScrollTo = document.getElementById(targetElementId);\nelementToScrollTo.scrollIntoView({ behavior: 'smooth' });\nEditing Custom JavaScript and CSS\n\nTo add custom styles or JavaScript to your content:\n\nIn the content entry, go to the Data tab.\nExpand the Code section.\nClick the Edit Custom JS + CSS button.\nIn the window that opens, you can put your CSS on the left and your JavaScript on the right.\nCustom CSS example\n\nThis example shows adding some custom CSS to a Page and then applying it to elements on the Page.\n\nThe CSS in below—which the video features–applies a margin and blue color to links (the a tag), and a yellow background color to any element with .my-class:\n\n/* Style all link elements */\na {\n     margin: 10px;\n     color: blue;\n}\n\n/* Style all elements with the class name \"my-class\" */\n.my-class {\n\tbackground-color: yellow;\n}\n\n\nTo use the CSS, add the code to the Custom Code editor and then apply the styles either by applying a class to an element or creating elements that would naturally inherit those styles.\n\nThe following video shows how to add custom CSS and apply it to elements. A written explanation follows the video.\n\nAny element that has the .my-class applied inherits the .my-class styles as soon as .my-class is applied to that element. In this example, when the Box is given the class .my-class, its background immediately turns yellow.\n\nAny elements that are styled directly in the CSS, such as links in this example, are styled automatically. This happens in the video as soon as the copy becomes a link.\n\nCustom Javascript example\n\nYou can run JS client side and/or server side using Builder.isBrowser and Builder.isServer. By default, any code not wrapped with Builder.isBrowser or Builder.isServer is run on Builder's servers.\n\nTo run code client-side, wrap it in if (Builder.isBrowser) {}.\n\nFor example, suppose you're rendering your Builder content lazily on the client and you want to support linking directly to certain sections of a page based on the ID attribute of the section. You could do this with some custom JavaScript:\n\nif (Builder.isBrowser) {\n    const el = location.hash &&\n      document.getElementById(location.hash.slice(1))\n\n    el.scrollIntoView({ behavior: 'smooth' });\n}\n\n\nYou also have access to fetch() on the client and server. For server side data, you can export a default promise that resolves with the necessary data before responding:\n\nasync function main() {\n  if (Builder.isServer) {\n    // Place any code here you want to only run on \n    // the server. Any  data fetched on the server \n    // will be available to re-hydrate on the client\n    // if added to the state object\n    await fetch(someUrl)\n      .then(res => res.json())\n      .then(data => {\n        // set the data on the state object so \n        // you can access it from your components\n        state.someData = data;\n     });\n  }\n  if (Builder.isBrowser) {\n    // Place code that you only want to run \n    // in the browser (client-side only) here\n    // For example, anything that uses \n    // document/window access or DOM manipulation\n  }\n}\n\nexport default main();\n\nIn the provided example, data fetched on the server is stored on the state object and can be accessed as data bindings in both the server and client UIs. For more details on fetching and using data, refer to Dynamic Preview URLs.\n\nRemember to exercise caution and consider the impact on performance and security when adding custom code to your site. For instance, when incorporating custom event listeners, ensure the use of passive events for proper handling.\n\nWhen adding your custom JavaScript code, the useful builder values include:\n\nBuilder.isServer: Use to determine if the code is running on the server-side (such as in a Node.js environment) or not. It returns true if the code is executing on the server, and false if it's running in a browser.\nBuilder.isBrowser: Use to check if the code is running in a browser environment. It returns true if the code is executing in a web browser, and false otherwise, including server-side.\nBuilder.isPreviewing: Use to check if the code is currently in preview mode within the Visual Editor. It returns true if the code is being previewed in the Visual Editor, and false if it's not in preview mode.\nBuilder.isEditing: Use to check if the code is currently being edited within the Builder.io editor. It returns true if the code is being edited, and false if it's not being edited.\n\nFor the source code, visit GitHub.\n\nTip: If your custom code isn't delivering expected results when working with page elements or third-party scripts, the event loop's asynchronous nature might be the reason. Consider using setTimeout() or conditional checks to time your code accurately and synchronize it with the page's rendering process.\n\nWhat's next\n\nFor more information on the global objects available, visit:\n\nBuilding Interactivity with Sate and Actions\nCustom Data and Context\nMDN's Fetch API documentation\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nManaging state and actions\nData binding: one-line expressions\nData Binding: complex code blocks\nAccessing state\nAction handlers: using the Event object\nEditing Custom JavaScript and CSS\nCustom CSS example\nCustom Javascript example\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Connecting your API data to builder - Builder.io",
    "url": "https://www.builder.io/c/docs/guides/connecting-api-data",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nConnecting API Data\n\nBy connecting to your API data, you can bind a single element or iterate over your data in the Builder Visual Editor. This tutorial covers how to set up an element, connect your data, and bind singly or iterate through your data.\n\nTo follow the example, you can use your own JSON API endpoint, tweaking to your needs, or use the one from the tutorial:\n\nhttps://randomuser.me/api?results=10\nSetting up a repeatable element\n\nTo iterate over a list of entries in your data, first set up a repeatable element that can accommodate your data objects. If you already have a repeatable element, check your structure against these instructions or skip to the next section.\n\nCreate a Page if you don't have one already.\nWithin the Visual Editor drag and drop a Box block from the Insert tab into the content area.\nDrag and drop another Box block into the first Box. Now you have one Box nested within another Box.\nDrag and drop an Image block into the inner Box.\nSelect the Box that wraps the image, and give it a width of 200px.\nDrag and drop a text box below the Image, within the same Box as the Image.\n\nThe following video demonstrates this process:\n\nConnecting to your data source\n\nTo add your JSON API endpoint:\n\nGo to the Data tab.\nIn the API Data section, click the + API Data Source button.\nName the Data Source according to your use case. This example uses users.\nPaste your JSON API endpoint URL into the input field. The format of this URL depends on your API. If you'd like to use the example endpoint, paste in https://randomuser.me/api?results=10.\nClick the Done button.\n\nThe following video demonstrates providing your endpoint URL:\n\nBinding your data\n\nAfter you've connected your data by specifying your JSON API endpoint, you can bind a single piece of data, multiple items, or iterate through your data.\n\nIterating through your data\n\nTip: Iterating, or repeating, the element for every item in your data is optional. If you'd prefer only to bind one item, skip to the next section.\n\nTo cause the smaller box, the one that contains the image, to repeat for every item coming in from an API, do the following:\n\nSelect the inner Box that contains the Image and Text blocks.\nStill in the Data tab, expand the Element data bindings section.\nFor Repeat for each, click the down arrow and select what you'd like to list. This example uses Results. This provides one item per result in the array.\nSelect an Image block.\nIn the Element data bindings section, click the + New Binding button.\nFor the Get dropdown, select Image.\nFor the From dropdown menu, select the large picture option, Results Item - Picture - Large.\nSelect a Text block.\nIn the Element data bindings section, click the + New Binding button.\nFor the Get dropdown, select Text.\nFor the From dropdown menu, select the large picture option, Results Item - Name - First.\n\nThe following video demonstrates iterating through 10 users from the example endpoint:\n\nBinding data to a specific value on a single element\n\nIterating over your data is optional. You could instead bind to a single element, rather than iterate over all data from the endpoint. For example, to bind to the value for the first name for the first item in the array:\n\nSelect an unbound Text box.\nIn the Data tab, after having provided your JSON API endpoint, expand the section Element Data Bindings.\nFor Get, choose Text.\nFor From, select or enter in the code editor state.users.results[0].name.first\nUsing the React SDK with SSR on cloud hosting services\n\nIf you're using Builder's SDKs and data binding on a provider with edge workers, such as Cloudflare, Netlify, or Vercel, you might encounter a situation where certain dependencies are automatically removed in their ISR (Incremental Static Regeneration) functions.\n\nTwo indicators can help identify this issue:\n\nHydration errors—where the SSR and the client side version are different—because the data binding did not execute on the server side.\nMissing data that populates on the client side; that is, the data binding is not executing on the server side.\n\nThis can lead to a failure with the function safeDynamicRequire. In such cases, consider applying the following workaround.\n\nIn the pages/_document.jsx file or any server-only execution location, add the following code:\n\nimport ivm from 'isolated-vm'\nimport { Builder } from '@builder.io/react'\n\nconst isolate = new ivm.Isolate({ memoryLimit: 128 });\nconst context = isolate.createContextSync();\nBuilder.setServerContext(context);\n\n\nIf there's no _document.tsx file in the project, you can add the code anywhere but wrap it with this condition:\n\nif (Builder.isServer) {\n  // Add the provided code here\n}\n\n\nThis workaround should prove helpful when using Builder's React SDK on the server side with Vercel or similar platforms where automatic dependency removal might cause issues.\n\nStyling your iterated data\n\nAfter your data is displaying, you can style your content however you like. As an example, this video shows changing the layout to a grid pattern by selecting the outermost Box, setting the Inner Layout to Grid, and applying a margin.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nSetting up a repeatable element\nConnecting to your data source\nBinding your data\nIterating through your data\nBinding data to a specific value on a single element\nUsing the React SDK with SSR on cloud hosting services\nStyling your iterated data\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "How Builder Works: A Technical Overview - Builder.io",
    "url": "https://www.builder.io/c/docs/how-builder-works-technical",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nHow Builder Works: A Technical Overview\n\nBuilder is a Visual Headless CMS. You determine which parts of your app that non-developers can create and manage. Builder passes data to your site or app using various SDKs and APIs.\n\nThe images below show how you:\n\nAdd a little code to your app\nUse Builder to add drag-and-drop\nClick the Publish button to make your content live\n\nBuilder doesn't host your site for you, but gives you the tools to dynamically load content created in Builder into your code. You have complete control as to what you want to be Builder-editable and where.\n\nYou control the structure of your site with models. You can customize where content of each model loads, how it is targeted and filtered, and where and how it is rendered.\n\nTo get up and running with an integrated app, see the Developer Quickstart.\n\nComparing to a traditional headless CMS\n\nIn many ways, Builder works the same as any headless CMS, and Builder's CMS data models work identically.\n\nLike a typical headless CMS, you create entries with structured custom fields or targeting. You can then query these fields with our content API and display the content you want, where you want.\n\nIn many cases with Builder, the main difference is instead of hard coding a page layout, you have a Builder renderer component render the content dynamically, optionally using components from your codebase.\n\nOptionally, you can also restrict Builder editing to only these components—with or without allowing custom styling—using components-only mode and/or roles and permissions.\n\nThe next image shows how integrating your app can remove hard-coded content best maintained by other roles on your team, such as marketers, and copywriters.\n\nIn addition to visual editing, Builder also adds additional features that are less common in traditional headless CMSes, such as content targeting and analytics.\n\nStructured CMS data has its purposes, and while it often isn't the best for things like pages and layouts, it can be great for a number of other use cases that structured data can be more ideal than pure visual editing.\n\nUnder the hood, Builder is a headless CMS like any other. You can create documents with structured data fields and consume these via our SDKs and APIs and render the data as you choose.\n\nOn top of this, Builder adds even more power by letting you register components that can render dynamically, saving you from having to write all of this logic manually. Instead, you can pass the data to a render Builder provides, such as in the following snippet:\n\nFor pages and sections, Builder automatically populates a field called blocks that is a list of components to render and their options, as in the following snippet:\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nComparing to a traditional headless CMS\nHow the data is structured\nPerformance is a top priority\nHow the Visual Editor works\nHow the real-time preview works\nHosting\nExtending Builder functionality with your own code\nHow Builder is structured\nStructuring your site\nAvailability and reliability\nGetting integration help\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Custom Data and Context - Builder.io",
    "url": "https://www.builder.io/c/docs/custom-actions",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nCustom Data and Context\n\nCustom actions give you a powerful tool for creating dynamic and interactive experiences in Builder. You can add new functionality to your UI, reuse code across multiple components, and create a more engaging and user-friendly experience for your users.\n\nTip: The techniques covered in this document are for the Gen 1 React SDK. For detailed information on the Gen 2 SDKs, visit SDK Comparison.\n\nPassing data down with BuilderComponent\n\nTo pass data down, you can use the data prop in the BuilderComponent and assign it an object with key-value pairs. For example, you can pass a list of products and additional data, such as an isLoggedIn boolean:\n\n<BuilderComponent\n  model=\"page\"\n  data={{\n    products: productsList,\n    isLoggedIn: true,\n  }}\n  content={builderJson}\n/>\n\n\nThe data passed down is available in Builder actions and bindings using the prefix state.*. For example, state.products refers to the productsList passed down in the example above.\n\nYou can also pass down functions and complex data using the context prop. For example:\n\n<BuilderComponent\n  model=\"page\"\n  context={{\n    addToCart: () => myService.addToCart(currentProduct),\n    lodash: lodash,\n  }}\n  content={builderJson}\n/>\n\n\nHere, the context object is assigned two key-value pairs:\n\na function addToCart()\nthe library lodash\n\nThe context passed down is available in Builder using the prefix context.*. For example, context.lodash refers to the lodash library passed down in the example above.\n\nExample: setting up a custom action on a button\n\nYou can add an action to any element, though button actions are frequently customized, which this section covers.\n\nIn your code: passing down a function\n\nThe following example demonstrates a context object that defines a single function called myFunction(), which displays an alert with \"Hi!\" when called.\n\nexport default () => (\n  <BuilderComponent \n    name=\"page\" \n    context={{ \n      myFunction: () => alert('Hi!') \n    }} \n  />\n)\n\n\nBy passing down functions using the context prop, you can create flexible and dynamic UI components in the Builder Visual Editor that respond to user input and other events.\n\nIn Builder: adding an on click event\n\nTo assign the function to run on click of a button:\n\nSelect the button.\nGo to the Data tab.\nExpand the Element events section. For this example, leave the default of On to click.\nClick the + New Event button.\nClick Edit Action > + Action > Custom Code.\nAdd your custom Javascript. In this example, add context.myFunction().\n\nThe following video demonstrates this process:\n\nAfter you've set up a custom action on an element, such as a button, you can save the element as a Template or Symbol for reusability.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPassing data down with BuilderComponent\nExample: setting up a custom action on a button\nIn your code: passing down a function\nIn Builder: adding an on click event\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using the Builder API Key - Builder.io",
    "url": "https://www.builder.io/c/docs/using-your-api-key",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing Builder API Keys\n\nAn API key is an alphanumeric string that you can use to connect your code base with Builder. Use the Builder Public API Key to integrate with Builder.\n\nAn example of a Builder API Key is bb209db71e62412dbe0114bdae18fd15.\n\nPrerequisites\n\nTo get the most our of this document, you should have the following:\n\nA Builder account\nAn app in your framework of choice\n\nTip: The Builder Public API Key is public, meaning that you don't have to keep it private. Because of this, there are no inherent security risks in it being publicly viewable, for example, on GitHub.\n\nFinding your Public API Key\n\nYou can find and copy your Public API Key with the following steps:\n\nWithin your Builder Space, press Cmd/Ctrl + k to open the Command Palette.\nStart to type the letters API into the search field to filter results.\nClick your API key to copy to your clipboard.\n\nAlternatively, you can also find your Public API Key in Account Settings for the Space:\n\nWithin your Builder Space, go to the Account Settings section.\nClick the copy icon to the right of the Public API Key field.\n\nThe video below shows both ways to find the Public API Key.\n\nUsing your Public API Key in your framework\n\nMost JavaScript apps use builder.init() to pass in the Public API Key. Replace YOUR_API_KEY with the Public API Key you copied from Account Settings.\n\n// Replace with your Public API Key\nbuilder.init('YOUR_API_KEY')\n\nThe following example shows what an actual Public API Key looks like when passed into builder.init().\n\nUsing your Public API Key in Angular\n\nIn Angular, pass your API Key into BuilderModule.forRoot(), by replacing YOUR_API_KEY with the Public API Key you copied in Account Settings. Place the forRoot() method in the @NgModule() imports array.\n\nWhen you replace the YOUR_API_KEY placeholder, it looks similar to the following example.\n\nManaging Private Keys\n\nUse Private Keys when you want to create a server-side only key for writing to your Builder account or to pull content that you want to keep private.\n\nTo view or use Private API Keys, you must have Admin or Developer permissions.\n\nTip: Keep your Private API Key secret. It allows anyone to have write access to your content in Builder. Only use it in API calls from your server, not calls from public client applications.\n\nRemember to ensure your Private API Keys are kept out of any version control system that you may be using.\n\nManaging an Organization's Private Key\n\nWith Organization Admin permissions, you can view, copy, or revoke the single, default Organization Private API Key. If you revoke the key, the dialogue gives you the option to create another key.\n\nTo manage the Private Key for your Organization:\n\nGo to the Organization Account Settings.\nTo the right of Private Keys, click the Edit button.\n\nFor more information on Admin permissions at the Organization level, see Managing Your Organization.\n\nManaging multiple Private API Keys in a Space\n\nIf you need to manage or create multiple Private API Keys, go to the Space Account Settings, rather than the Organization settings.\n\nTo manage the Private Key for your Organization:\n\nGo to the Organization Settings.\nTo the right of Private Keys, click the Edit button.\nCreate or revoke as many keys as you need.\n\nTo use Private Keys in a Space, make sure the Public readable toggle in the model is turned off. Then use the Content API to request private content using a Private API Key.\n\nFor more information, see Creating a Private Page.\n\nWhat's next\n\nWith your API Key in place, you can integrate powerful Builder features. To get started, check out the following tutorials:\n\nIntegrating Pages: set up your app so teammates can build Pages on their own.\nIntegrating Sections: integrate Section building for reusable content\nIntegrating CMS Data: create structured reusable data across your site\nIntegrating Symbols: elegantly reuse data across your app\nIntegrating Custom Components: use your custom components in Builder's drag-and-drop UI\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nFinding your Public API Key\nUsing your Public API Key in your framework\nUsing your Public API Key in Angular\nManaging Private Keys\nManaging an Organization's Private Key\nManaging multiple Private API Keys in a Space\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Integrating Symbols - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-symbols",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntegrating Symbols\n\nSymbols are a type of section model you can integrate for editing on your site or app. They help you elegantly reuse content across many Builder Pages and Sections. For more information, see Intro to Symbols.\n\nPrerequisites\n\nTo get the most out of this document, you should have:\n\nintegrated Pages or integrated Sections\na Symbol model that you've already created\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Page Building.\n\nAdd Symbol editing to your app\n\nCreate a special page on your site specifically for Symbol editing. This is what the Builder preview opens when you create and edit symbols. It's important this be on a URL directly on your site, so all previewing and editing are accurate.\n\nIn this example, this page is named /edit-symbol.\n\nNext\nGatsby\nNuxt\nRemix\nHydrogen\nSvelte\nAngular\nREST API\n\nCreate a page with the following contents. Make sure to replace YOUR_API_KEY with your Public API Key:\n\n// pages/edit-symbol.jsx\n\nimport { BuilderComponent, builder } from '@builder.io/react';\n\n// Replace with your Public API Key.\nbuilder.init(YOUR_API_KEY);\n\nexport default function Page() {\n  return <BuilderComponent model=\"symbol\" />\n}\n\n\nBuilderComponent allows the drag and drop editor to work in the specified region of your site.\n\nNote that if you have registered custom components, you must import them on this page so that they are available in the Visual Editor.\n\nUpdate your Symbol Preview URL\nGo to Models and choose the Symbol model. If you don't have Symbol here, make sure that you've met the prerequisite of having created a Symbol. For step-by-step instructions, read Making a Symbol.\nEnter your site domain at a specifc path, such as/edit-symbol, for example https://my-site.com/edit-symbol.\nClick Save.\n\nYou can use localhost when testing locally, then change to a hosted URL like your QA or production URL once your code updates have been deployed.\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nAdd Symbol editing to your app\nUpdate your Symbol Preview URL\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Integrating Sections - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-section-building",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntegrating Sections\n\nYou can use Builder Sections to create reusable content across multiple pages. You can manage the code within your codebase, and teammates in the UI can iterate in the Visual Editor.\n\nExamples include:\n\nBlog Article\nHero Section\nAnnouncement Bar\nProduct Editorial\nHomepage\n\nThis tutorial shows you how to create and add an announcement bar section to a page.\n\nFor more conceptual information Section Models, refer to the Section Models documentation.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate Builder SDK installed\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Page Building.\n\nAdd an announcement bar section to your app\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nShopify\nREST API\n\nCreate a page with the following contents. Make sure to replace YOUR_API_KEY with your Public API Key:\n\nimport { useEffect, useState } from \"react\";\nimport { BuilderComponent, builder } from \"@builder.io/react\";\n\n// Replace with your Public API Key.\nbuilder.init(YOUR_API_KEY);\n\nexport default function Page() {\n  const [announcement, setAnnouncement] = useState(null);\n\n  useEffect(() => {\n    builder\n      .get(\"announcement-bar\", {\n        userAttributes: {\n          // To allow targeting different announcements at different pages (URLs)\n          urlPath: window.location.pathname,\n        },\n      })\n      .toPromise()\n      .then((announcementBar) => setAnnouncement(announcementBar));\n  }, []);\n\n  return (\n    <>\n      {/* Put your header here. */}\n      <YourHeader />\n      {announcement && (\n        <BuilderComponent model=\"announcement-bar\" content={announcement} />\n      )}\n      {/* Put the rest of your page here. */}\n      <TheRestOfYourPage />\n    </>\n  );\n}\n\n\n\nSections are typically targeted using some information about the user's state.\n\nFor instance, you can display an announcement bar when the user visits particular URLs. With custom targeting attributes, you can even display content based on complex conditions, such as when a user adds a particular item to their cart.\n\nAside from targeting, you can also query sections by custom fields.\n\nconst urlPath = '/' + (params?.page?.join('/') || '');\n\nconst announce = await builder\n    .get('announcement-bar', { userAttributes: { urlPath } })\n    .toPromise();\n\n\nThe announcement bar section in the example above is targeted with the current URL using the urlPath targeting attribute. When Builder finds an announcement bar with a matching URL, it responds with that announcement bar's content.\n\nThe snippet below demonstrates how the page and the page's announcement bar are rendered.\n\nreturn (\n  <>\n    <!-- Put your header here -->\n    <YourHeader />\n    <BuilderComponent model=\"announcement-bar\" content={announce} />\n    <!-- The rest of your page -->\n    <TheRestOfYourPage />`\n  </>\n);\n\n\nBuilderComponent receives the content for the announcement bar through the content prop and renders it next to your page's content.\n\nYou can also render a Builder-managed page next to your announcement bar or any other section by placing multiple BuilderComponent instances next to each other.\n\nCheck out How to Create a Page for a step-by-step tutorial on how to create a page in Builder and Integrating Pages on how to render your page content within your template.\n\nCreating a Section model\n\nCreate a Section model so you can make an announcement bar content entry.\n\nGo to Models.\nClick +Create Model.\nSelect Section.\nEnter Announcement bar as the name for your new Section model.\nClick Create.\nFor all frameworks except Swift: change the Preview URL on the Model Options page to the URL of the page that you added code to display your section. This example uses /announcements, but yours might be different.\n\nThe video below demonstrates this process:\n\nDepending on the framework, the path and port can vary. Localhost does not apply to Swift.\n\nCheck your framework according to the below:\n\nFramework\tlocalhost URL\n\nAngular\n\n\t\n\nhttp://localhost:4200\n\n\n\n\nGatsby\n\n\t\n\nhttp://localhost:3000\n\n\n\n\nQwik\n\n\t\n\nhttp://localhost:5174\n\n\n\n\nRemix\n\n\t\n\nhttp://localhost:3000\n\nWhen you create or edit an announcement bar section, the Visual Editor displays your content embedded within your Preview URL page, providing visual context and importing styles from your site. It's a live view of your section, as it will look on one of your pages when you publish.\n\nTip: Published sections typically appear across multiple pages with different URLs depending on how they're targeted. When previewing in the editor, however, they only appear within the Preview URL's page. For more information, refer to Editing and Previewing Your Site.\n\nFor more information what Section Models are and how to use them, refer to the Section Models documentation.\n\nCreating an announcement bar content entry\n\nNow that your Section model is set up, you can create an announcement bar content entry to add an announcement bar to your site.\n\nGo to Content.\nClick the + New button and select Announcement bar.\nBuild and style your announcement bar.\nName the content entry.\nClick Publish.\n\nThe video below demonstrates this process:\n\nTargeting by URL path\n\nTo make your announcement bar display based on targeting, in the section content entry; for example, in the announcement bar:\n\nClick on the Targeting icon.\nFor Where, select URL path.\nAdd the URL path you'd like to target.\nClick the Publish button.\n\nThe video below shows this process in an integrated Remix app where the targeted URL path is /builder so that the announcement bar doesn't show up on any other URLs. This process is the same, regardless of the framework you use. The URL path you target, however, might differ.\n\nTip: If you're using Gatsby, you may need to restart your app to render the announcement bar.\n\nWhat's next\nNext\nQwik\nReact\nRemix\nHydrogen\nVue\nSvelte\nAngular\nREST API\n\nWith your app and Builder working together, the next step is the fun part–add some more Sections in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nAdd an announcement bar section to your app\nCreating a Section model\nCreating an announcement bar content entry\nTargeting by URL path\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Integrating Structured Data - Builder.io",
    "url": "https://www.builder.io/c/docs/integrate-cms-data",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntegrating Structured Data\n\nYou can use Builder CMS Data to create structured reusable data across your site. You can manage the data schema, add, and remove fields within the UI and teammates can create and remove data items in auto-generated structured forms.\n\nExamples include:\n\nHeader navigation links\nProduct Details\nBlog authors\nStructured rich content such as user profiles\n\nThis tutorial shows you how to add editable navigation links to your site header.\n\nPrerequisites\n\nTo follow along with this tutorial, you should have the following:\n\na Builder account\nan app in the framework of your choice with the appropriate SDK installed\n\nTip: If you need to create an app, follow the steps for your framework in the Create an app section of Integrating Builder Pages.\n\nAdd header navigation link data to your app\nNext\nApp Router\nQwik\nReact\nRemix\nHydrogen\nGatsby\nVue\nNuxt\nSvelte\nAngular\nREST API\n\nCreate a page with the following contents, replacing YOUR_API_KEY with your account's Public API Key:\n\nimport { useEffect, useState } from \"react\";\nimport { builder } from \"@builder.io/react\";\n\n// Put your API key here\nbuilder.init(YOUR_API_KEY);\n\nexport default function App() {\n  const [links, setLinks] = useState([]);\n\n  // Get the CMS data from Builder\n  useEffect(() => {\n    async function fetchContent() {\n      const links = await builder.getAll(\"nav-links\", {\n        // You can use options for queries, sorting, and targeting here\n        // https://github.com/BuilderIO/builder/blob/main/packages/core/docs/interfaces/GetContentOptions.md\n      });\n      setLinks(links);\n    }\n    fetchContent();\n  }, []);\n\n  return (\n    <>\n      <header>\n        <nav>\n          {links.map((link, index) => (\n            <a key={index} href={link.data.url}>\n              {link.data.label}\n            </a>\n          ))}\n        </nav>\n      </header>\n      {/* Put the rest of your page here */}\n      {/* <RestOfYourPage /> */}\n    </>\n  );\n}\n\nCreating a Data model\n\nIn the Builder UI, create a Data model so you can create navigation links.\n\nIn the Models section of Builder, Click +Create Model.\nSelect Data.\nEnter Nav link as the name for your new Data model.\nClick +New Field.\nName the first field label and give it a type of Text.\nRepeat steps 3 and 4 to make a second label named Url with type url.\nClick Save.\nCreating Nav link content entries\n\nUse the new Data model to create Nav Link content entries.\n\nGo to the Content section of Builder.\nClick +New.\nSelect Nav Link.\nGive it a label, url, and name.\nClick Publish.\n\nTo make more links so that you can iterate through the links in your nav list, click the three dots and select Duplicate. Repeat steps 2-4 for each link you create.\n\nThe video below shows how to make three Nav Link entries.\n\nGo back to your website and refresh the page to see your nav links. After your links are rendering, try adding new content entries in Builder. For each new entry, the new link populates the nav.\n\nWhat's next\n\nFor more information on how to work with Models in Builder, refer to Understanding Content Models.\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nAdd header navigation link data to your app\nCreating a Data model\nCreating Nav link content entries\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Integrating Pages - Builder.io",
    "url": "https://www.builder.io/c/docs/integrating-builder-pages",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nIntegrating Pages\n\nAs a developer, you can integrate Builder into your codebase and give other team members, such as content editors, marketers, and designers, the ability to build and manage pages without ever having to ping you.\n\nTip: This guide is detailed. If you'd prefer a more succinct guide to integrating, visit Developer Quickstart, which is a cheatsheet version of this document.\n\nCreate an app if you don't have one\n\nWe highly recommend that you integrate Builder into an existing app; however, if you need to create an app, follow the steps for your framework in this section.\n\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nReact offers a number of ways to create an app with various frameworks.\n\nAt the command line, change directory with the cd command where my-app is the name of your app:\n\ncd my-app\n\nTip: On Windows, be sure to use quoting when you install dependencies that use the @ operator; for example, npm install \"@builder.io/react\".\n\nAdd Builder as a dependency\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/react\n\nStart the development server:\n\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\nnpm run dev\nAdd a Builder component to your app\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nPaste the following code into your JavaScript.\n\nA later section in this tutorial guides you through getting your Public API Key from the Account section of Builder. When you have your Public API Key be sure to add it to the builder.init() method in this code snippet. The API Key is required for connecting your app to Builder.\n\n\nimport { useEffect, useState } from \"react\";\nimport { BuilderComponent, builder, useIsPreviewing } from \"@builder.io/react\";\n\n// Put your API key here\nbuilder.init(YOUR_API_KEY);\n\n// set whether you're using the Visual Editor,\n// whether there are changes,\n// and render the content if found\nexport default function CatchAllRoute() {\n  const isPreviewingInBuilder = useIsPreviewing();\n  const [notFound, setNotFound] = useState(false);\n  const [content, setContent] = useState(null);\n\n  // get the page content from Builder\n   useEffect(() => {\n    async function fetchContent() {\n      const content = await builder\n        .get(\"page\", {\n          url: window.location.pathname\n        })\n        .promise();\n\n      setContent(content);\n      setNotFound(!content);\n\n      // if the page title is found, \n      // set the document title\n      if (content?.data.title) {\n       document.title = content.data.title\n      }\n    }\n    fetchContent();\n  }, [window.location.pathname]);\n  \n  // If no page is found, return \n  // a 404 page from your code.\n  // The following hypothetical \n  // <FourOhFour> is placeholder.\n  if (notFound && !isPreviewingInBuilder) {\n    return <FourOhFour/>\n  }\n\n  // return the page when found\n  return (\n    <>\n      {/* Render the Builder page */}\n      <BuilderComponent model=\"page\" content={content} />\n    </>\n  );\n}\n\nUsing your app with Builder\nNext\nApp Router\nQwik\nSwift\nReact\nReact Native\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\nUsing your app with Builder\n\nBuilder adds the ability for your team members–even those who don't code–to create and iterate on ideas with a drag-and-drop interface.\n\nHead over to Builder.io to sign up for an account if you don't already have one. Come back when you're logged in.\n\nThis next video covers the steps in this section of the tutorial all in one place to give you an idea of how it all works and the end result. This example uses Next.js but all frameworks use the same process:\n\nGetting your API Key\n\nTo connect your Builder.io space to your application, add the Public API key to your code.\n\nFind your Public API Key within Builder.io in one of two ways:\n\nPress Cmd/Ctrl+k in Builder to bring up the command palette and search for API Key. Clicking the Public API Key copies it to your clipboard.\nGo to Account Settings and copy your Public API Key.\n\nFor more detail about the Public API Key, see Using Builder API Keys.\n\nPaste the Public API Key into your app by replacing the YOUR_API_KEY placeholder in your code. This location varies depending on your framework and is covered in the earlier sections of this tutorial.\n\nThe following video shows copying the Public API Key and pasting it into a Next.js app.\n\nSetting the model preview URL\n\nTo enable Builder to open your site in the Visual Editor, provide a URL that Builder can open which has the Builder rendering component in it.\n\nGo to Models and choose the Page model.\nSet the Preview URL to http://localhost:<your-port>, where <your-port> is the port your app is using. Be sure to include the http://.\nClick Save.\n\nThe following video shows these steps:\n\nCreating a Builder Page\n\nCreate a Builder Page to use with your integrated app.\n\nGo to Content.\nClick the +New button near the top right of the screen.\nCreate a new page in Builder and name it Test Page. Notice that Builder automatically generates the path as /test-page.\nWhen you are prompted to choose a starting template, choose Blank. The editor for your new page loads automatically.\nIn your new page, drag in a Text block.\nClick Edit and add something like, \"I did it!!\".\nClick the Publish button in the upper right of the browser.\n\nThe next video shows creating a page in a Builder-integrated app and dragging in a text block:\n\nTip: After you deploy your updates, be sure to update this to a public URL, such as your live site or your staging site; for example, https://your-site.com, so anyone on your team can connect to your site for visual editing.\n\nDepending on the framework, the path and port can vary. Check your framework according to the below:\n\nFramework\tlocalhost URL\n\nAngular\n\n\t\n\nhttp://localhost:4200\n\n\n\n\nGatsby\n\n\t\n\nhttp://localhost:3000\n\n\n\n\nQwik\n\n\t\n\nhttp://localhost:5173\n\n\n\n\nRemix\n\n\t\n\nhttp://localhost:3000\n\nGo to http://localhost:<your-port>/test-page and check out your work. Well done!\n\nIf you're getting a 404 but aren't sure why, check these things:\n\nMake sure you've published your page in Builder by clicking the Publish button on the upper right corner.\nCheck the URL. If you name the page test2 for example, Builder adds a hyphen, so that the URL segment is test-2.\nMake sure that you've set the preview URL on the Page Model.\nBuilder Pages best practice\n\nWe recommend that you place your Builder pages between your header and footer. A common use case is developers keeping headers and footers in their codebase while integrating page building. In this way, non-developer team members can iterate on pages, without having to rely on developers.\n\nTo use Builder pages between your header and footer, follow the guidance below for your framework:\n\nNext\nQwik\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nImport your header and footer along with the other JavaScript imports at the top of your page component; for example, page.js.\n\nAdd the header and footer components before and after BuilderComponent.\n\n+ import MyHeader from '../components/my-header'\n+ import MyFooter from '../components/my-footer'\n\n export default function Page({ page }) {\n   ...\n   return (\n     <>\n       <Head>\n         <title>{page?.data.title}</title>\n       </Head>\n\n+      <MyHeader />\n       <BuilderComponent model=\"page\" content={page} />\n+      <MyFooter />\n     </>\n   );\n }\n\n\n\nFor a community example with Builder and Next.js that includes ISR capabilities and SEO optimizations, see Kenzitron's Builder.IO & NextJs starter with ISR & SEO optimization on GitHub.\n\nThis guide demonstrated integrating page building into an app. For more demo apps in many frameworks, see Builder's GitHub repository for complete examples.\n\nWhat's next\nNext\nQwik\nReact\nRemix\nHydrogen\nNuxt\nVue\nSvelte\nGatsby\nAngular\nREST API\n\nWith your app and Builder working together, the next step is the fun part–add some pages in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nCreate an app if you don't have one\nAdd Builder as a dependency\nAdd a Builder component to your app\nUsing your app with Builder\nBuilder Pages best practice\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Developer Quickstart - Builder.io",
    "url": "https://www.builder.io/c/docs/quickstart",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nDeveloper Quickstart\n\nThis Quickstart shows how to integrate page building with Builder.io in a brief format. We recommend this as the best way to get started with the Builder platform.\n\nTip: This Quickstart moves at a fast pace to get you up and going as quickly as possible, so it assumes development proficiency and workflow familiarity. For more detailed, step-by-step instructions, see Integrating Pages.\n\nPrerequisites\n\nTo get the most out of this guide, you should have:\n\nA working app in the framework of your choice. Create an app if you don't already have one.\nA basic understanding of development including the command line, npm, and code for your framework.\nA Builder Space.\nStep 1: Add Builder as a dependency\nFramework\nReact\nMeta-Framework\nNone\nSDK Generation\nGen 2\n\nAt the command line, use npm to install the Builder SDK:\n\nnpm install @builder.io/sdk-react\n\nStart the development server:\n\nnpm start\n\nTip: On Windows, be sure to use quoting when you install dependencies that use the @ operator; for example, npm install \"@builder.io/react\".\n\nStep 2: Add a Builder component to your app\nFramework\nReact\nMeta-Framework\nNone\nSDK Generation\nGen 2\n\nPaste the following code into your JavaScript, making sure to replace YOUR_API_KEY with your Public API Key, which you can find in the Account section of Builder or by pressing Cmd/Ctrl+k and filtering for \"API\".\n\nimport { Content, fetchOneEntry, isPreviewing } from '@builder.io/sdk-react';\nimport { useEffect, useState } from 'react';\n\n// set whether you're using the Visual Editor,\n// whether there are changes,\n// and render the content if found\nexport default function CatchAllRoute() {\n  const [notFound, setNotFound] = useState(false);\n  const [content, setContent] = useState(null);\n\n  // get the page content from Builder\n  useEffect(() => {\n    fetchOneEntry({\n      model: 'page',\n      apiKey: BUILDER_PUBLIC_API_KEY,\n      userAttributes: {\n        urlPath: window.location.pathname || '/',\n      },\n    })\n      .then(content => {\n        if (content) {\n          setContent(content);\n        }\n        setNotFound(!content);\n      })\n      .catch(err => {\n        console.log('something went wrong while fetching Builder Content: ', err);\n      });\n  }, []);\n\n  // If no page is found, return\n  // a 404 page from your code.\n  // The following hypothetical\n  // <FourOhFour> is placeholder.\n  if (notFound && !isPreviewing()) {\n    return <FourOhFour />;\n  }\n\n  // return the page when found\n  return <Content content={content} model=\"page\" apiKey={BUILDER_PUBLIC_API_KEY} />;\n}\n\n// TODO: enter your public API\nUsing your app in Builder's Visual Editor\nGo to the Models section in Builder and choose your Page model.\nSet the Preview URL to http://localhost:YOUR_PORT where YOUR_PORT is the port number for your app. Be sure to include the http://.\nClick Save.\nIn the Content section of Builder, create a new blank Page and name it something like Test Page.\nAdd some minimal content, such as a Text block with some copy such as \"I did it!\".\nClick the Publish button.\nGo to http://localhost:3000/test-page, where test-page is the name you gave your page, and check out your work. Well done!\n\nThe next video shows this process, including getting your API Key as described in the last section:\n\nIf you're getting a 404 but aren't sure why, check these things:\n\nMake sure you've published your page in Builder by clicking the Publish button on the upper right corner.\nCheck the URL. If you name the page test2 for example, Builder adds a hyphen, so that the URL segment is test-2.\n\nFor a community example with Builder and Next.js that includes ISR capabilities and SEO optimizations, see Kenzitron's Builder.IO & NextJs starter with ISR & SEO optimization on GitHub.\n\nWhat's next\n\nWith your app and Builder working together, the next step is the fun part–add some pages in Builder and drag in some elements. Play with styles and explore the UI.\n\nUse your custom components in Builder\n\nTo use your own components in the Visual Editor, including replacing built-in blocks, see Integrating Custom Components.\n\nStart using custom components\n\nDeploy your updated app to a preview environment\n\nGive others a way to try the Visual Editor integrated with your site.\n\nDeploy to a preview env\n\nFor more examples of what you can do with Builder, check out the Blueprints, which cover varied use cases at a high-level with code examples.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nStep 1: Add Builder as a dependency\nStep 2: Add a Builder component to your app\nUsing your app in Builder's Visual Editor\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder.io docs - Builder.io",
    "url": "https://www.builder.io/c/docs/intro",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\nStart Here\nBuilding Content\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nBuilder Knowledge Base\n⌘K\n\nGet Started With Builder\n\nLearn your way around Builder. Perfect for Designers, Marketers, Editors, and Admins\n\nGo to the Developer Docs\n\nIntegrate Builder with your code base and unlock your team's potential\n\nVisual Editor Tutorials\n\nFor tutorials and guides on creating Pages, Sections, and using data in Builder's Visual Editor, check out Start Building.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Using Builder Devtools for Automated Integration - Builder.io",
    "url": "https://www.builder.io/c/docs/devtools",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nUsing Builder Devtools for Automated Integration\n\nin beta\n\nYou can skip manual integration and let Builder's Devtools handle the details for you.\n\nBuilder Devtools automatically handles integration with Builder's Visual Headless CMS and provides an intuitive UI for registering components and managing content.\n\nCurrently, Builder Devtools supports integration with Next.js, Qwik, Remix, and Hydrogen.\n\nNeed another framework? While we add more frameworks, refer to the Developer Quickstart to integrate with other frameworks.\n\nPrerequisites\n\nMake sure you have Node.js and npm (Node Package Manager) installed on your system.\n\nCreate an app if you don't already have one\n\nGenerate an app and cd into the new app's directory by running the following command at the command line, where my-next-app or my-qwik-app is the name you give your app:\n\nNext\nQwik\nRemix\nHydrogen\nnpx create-next-app my-next-app\ncd my-next-app\nInstall Builder Devtools\n\nThis command automatically sets up the integration with Builder, connects to your Builder account, and adds your API key.\n\nIn the root of your project, run the following command to install Builder Devtools:\n\nnpm init builder.io@latest\n\nWhen prompted, respond Yes to integrating with Builder.io:\n\nStart the development server\n\nAfter installing Builder Devtools, start your development server:\n\nnpm run dev\nAccess the Builder Devtools UI\n\nWith the development server running, access the Builder Devtools UI:\n\nOpen your web browser and navigate to your project's local development URL—usually http://localhost:3000/ for Next.js or http://localhost:5173/ for Qwik.\nClick the Let's get started button.\nChoose a Space to authorize for integration and click Authorize.\nClick the Go to your app button.\nOn the bottom right, click on the Builder logo to get to your components, settings, and adding a Builder Page.\n\nTip: If you're using Windows, you might need to restart your dev server.\n\nThe video below shows authorizing and connecting to a Builder Space.\n\nRegister components\n\nThe Devtools drawer displays all of your components, both registered and unregistered. From here, you can:\n\nRegister components: toggle components on to register them with Builder.\nView and edit registered components: Interact with your registered components directly from the Devtools UI. You can rename, register, and edit inputs.\nVisualize content: Display content that's in Builder and click on an overlay to jump into any Builder element directly in the Visual Editor.\n\nTo register your components with Builder:\n\nOpen the Devtools drawer by clicking on the Builder logo on the bottom right.\nClick Components to display all of the components, registered or not, in your code base.\nSelect a component.\nToggle on to register the component. The code to register the component is added automatically to your code.\n\nThe next video shows this process by registering a Counter component:\n\nThe next video shows registering a component and editing its name in Devtools. At the end of the video, notice that the Devtools edit that changes the component's name from Footer to MyFooter, updates in the code editor.\n\nTip: When registering components, Devtools can recognize most input types; however, more complex types require manual coding. If you want to add lists and objects, read about them in Input Types in Builder.\n\nShare your feedback\n\nDevtools is under active development, and we'd love to know what you think. Your feedback helps us meet the real world needs of Builder's community and we couldn't do it without you!\n\nWhat's next\n\nFor more detailed information on registering custom components in Builder, read Integrating Custom Components.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nCreate an app if you don't already have one\nInstall Builder Devtools\nStart the development server\nAccess the Builder Devtools UI\nRegister components\nShare your feedback\nWhat's next\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Importing Figma designs into Builder.io - Builder.io",
    "url": "https://www.builder.io/c/docs/import-from-figma",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nPopular Tutorials\nVisual Copilot\nBuilder + Figma\nFigma Best Practices\nAI for Content\nHow Builder Uses AI\nUI Overview\nBuilding Responsively\nCreating Content\nOrganizing Content\nMaintaining Content\nOptimizing Content\nSymbols & Templates\nImages and Video\nLocalization\nForms\nBest Practices\nShopify + Builder\nGlossary\nDeveloper Docs\nEnterprise Hub\nAccount\n\nBlueprints\n\nImporting from Figma with Visual Copilot\n\nin beta\n\nAs part of the suite of tools known as Visual Copilot, the Builder Figma plugin helps you import your Figma design directly into Builder while letting AI take care of the details—no more manually rasterizing, applying auto layout, or figuring out all the responsiveness.\n\nImport your Figma designs into Builder to create a Page or Section, complete with responsive styles.\n\nGet pro tips on importing your design\n\n\nFor the best experience and a deeper understanding of how the plugin works, get familiar with Best Practices with Builder's Figma Plugin.\n\nPrerequisites\n\nBefore importing your Figma design into Builder, make sure:\n\nYou've installed the Builder.io plugin for Figma.\nYou have a completed design in Figma.\nUsing AI with the Builder.io Figma plugin\n\nThe AI features in the Builder plugin take care of all the details—including rasterizing images, applying auto layout, and making the design responsive in Builder.\n\nTo import your Figma design into Builder using AI:\n\nIn your Figma file, select the frame(s) you'd like to import into Builder.\nIn Figma, open the Builder plugin by clicking on Resources in the toolbar and going to the Plugins tab.\nClick the Generate Code button.\nThis workflow launches a Builder fiddle with your content, which you can copy and paste into another Builder document or save as a template.\n\nTip: Always check your import in Builder by clicking each device icon and tweaking as needed.\n\nMost settings you might want to update are in the Style tab, such as margins and padding, widths, and alignment.\n\nThough you don't have to do any prep to your Figma file before using the plugin, you can optionally apply Auto Layout as a guide for the AI, especially if you're finding that your design could use some extra help.\n\nThe video below shows how to import your Figma design into Builder using the plugin's AI feature. This example uses a full page, but importing a section design is the same.\n\nPasting Figma layers into Builder\n\nEffortlessly copy and paste your Figma designs into Builder with the Builder Figma plugin. This workflow is great for when you need to update an existing Page or Section; for example, design updates to a hero.\n\nTo import layers from Figma into Builder using the Figma plugin:\n\nSelect the layer(s) in Figma.\nOpen the Builder Figman plugin and expand the options in the Generate code button.\nSelect Copy & Paste Designs.\nWhen the copy process is done, go to the Builder Visual Editor and paste with Cmd/Ctrl + v.\n\nTip: Make sure you use the Generate Code button's Copy & Paste Designs option, as this is how the plugin implements the import process.\n\nThe next video shows this process.\n\nBest Practices\n\nFor more detail on making the most of Visual Copilot, visit Best Practices with Builder's Figma Plugin.\n\nHow AI contributes to Visual Copilot\n\nCertain parts of the Visual Copilot workflow use AI, for more information, read AI in Visual Copilot in How Builder Uses AI.\n\nHelp us meet your needs\n\nBecause Visual Copilot is in beta, we are working daily to make improvements and iterate on its functionality. As we continue to solve for a broader range of use cases, some designs might benefit from extra help so that the AI can process the import better.\n\nIf your design is a candidate for helping us learn how to better meet your needs, we invite you to share your feedback. While we work with your feedback, we recommend Best Practices with Builder's Figma Plugin.\n\nWhat's next: get your code\n\nAfter importing your Figma design into Builder—or creating a design from scratch in Builder—you can generate semantic code for your design and sync that code with your codebase. For instructions, visit Generating Code.\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\nON THIS PAGE\nPrerequisites\nUsing AI with the Builder.io Figma plugin\nPasting Figma layers into Builder\nBest Practices\nHow AI contributes to Visual Copilot\nHelp us meet your needs\nWhat's next: get your code\n\nWhat can we improve?\n\nYour feedback helps us improve our documentation.\n\nGive feedback\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  },
  {
    "title": "Builder.io developer docs - Builder.io",
    "url": "https://www.builder.io/c/docs/developers",
    "html": "Made in Builder.io\n\nJoin us for the biggest Figma-to-code launch of the year\n\nPlatform\nSolutions\nDevelopers\nPricing\nResources\nTalk to Us\nSign Up\n⌘K\nStart Here\nBuilding Content\nDeveloper Docs\nDeveloping with Builder\nDevtools: Automated Integration\nQuickstart\nIntegrating Pages\nIntegrating Sections\nIntegrating Structured Data\nIntegrating Symbols\nIntegrating Custom Components\nHow Builder Works\nModels\nPreview URLs\nAPI Keys\nAPI\nConnecting API Data\nCustom Data\nCustom Code\nGenerating Code\nScripting the Visual Editor\nPlugins\nSDK Comparison\nEnrich for Fetching\nSEO\nTargeting\nTracking & Dashboards\nWidgets\nFramework Resources\nEnterprise Hub\nAccount\n\nBlueprints\n\nLET'S BUILD TOGETHER\n\nDeveloping with Builder\n\nGet building with Builder's Visual Headless CMS!\n\nAutomatic Integration with Devtools\n\nINTEGRATE WITH YOUR CODE\n\nIntegrate Page Building\n\nIntegrate Section Building\n\nIntegrate Structured Data\n\nWhich should I use?\nBuilder Blueprints\n\nBlueprints are quick references for common use cases with Builder.\n\nLanding pages\nBlog Article\nHero Section\nNavigation Links\nAnnouncement Bar\nProduct Details\nProduct Editorial\nHomepage\n\nYour experience is so important. Let us know what you think.\n\nGive Blueprint Feedback\n\nDIVE DEEPER\n\nIntegrate Custom Components\n\nLearn About Content Models\n\nExtend Builder with Plugins\n\nEXPLORE THE BUILDER PLAYGROUND:\n\nExplore a Builder Integration in Your Browser\n\nPOPULAR DEVELOPER DOCS\n\nHow Builder Works: Technical Overview\n\nAPI Documentation\n\nGenerating Code with Visual Copilot\n\nIntegrate Symbols\n\nWe ❤️ open source\n\nBuilder\n\nBuilder SDKs, plugins, examples, and more\n\nQwik\n\nResumable framework for building instant-on web apps with great time-to-interactive\n\nMitosis\n\nUniversal components compiler. Write components once, run everywhere.\n\nPartytown\n\nRelocate resource intensive 3rd - party scripts off the main thread and into a web worker.\n\nFigma / HTML\n\nConvert Figma designs to HTML, CSS, React, Vue and more!\n\nLooking to hire a third party to help with your project?\n\nSubmit a project request and our partnerships team will reach out to connect you with an Expert from our partner ecosystem.\n\nConnect with us\n\nWas this article helpful?\n😞\n😐\n😃\n\nGet the latest from Builder.io\n\nDeveloper Newsletter\n\nLatest tips, tricks, and news for frontend developers from our blog\n\nProduct Newsletter\n\nLatest features and updates on the Builder.io platform\n\nBy submitting, you agree to our Privacy Policy\n\nPRODUCT\n\nVisual Copilot Beta\n\nVisual Headless CMS\n\nIntegrations\n\nWhat's New\n\nCOMPANY\n\nAbout\n\nCareers\n\nDEVELOPERS\n\nBuilder for Developers\n\nDocumentation\n\nDevtools\n\nTry Builder Playground\n\nOPEN SOURCE\n\nBuilder\n\nMitosis\n\nQwik\n\nPartytown\n\nSOLUTIONS\n\nEcommerce\n\nMarketing Sites\n\nLanding Pages\n\nMobile Apps\n\nMulti-brand\n\nHeadless CMS\n\nPOPULAR GUIDES\n\nFrom Design to Code Ebook\n\nSaaS Marketing Site Ebook\n\nComposable Commerce Ebook\n\nHeadless CMS Guide\n\nHeadless Commerce Guide\n\nDesign to Code\n\nRESOURCES\n\nBlog\n\nKnowledge Base\n\nCommunity Forum\n\nPartners\n\nPerformance Insights\n\nTemplates\n\nSuccess Stories\n\nShowcase\n\nDemo Library\n\nCMS\n\n>\n\nFRAMEWORKS\n\nReact\n\nNext.js\n\nQwik\n\nGatsby\n\nAngular\n\nVue\n\nSvelte\n\nRemix\n\nNuxt\n\nHydrogen\n\nVisually build and optimize digital experiences on any tech stack. No coding required, and developer approved.\n\nGet Started\n\nLog In\n\n© 2024 Builder.io, Inc.\n\nSecurity\n\nPrivacy Policy\n\nSaaS Terms\n\nSecurity & Compliance"
  }
]